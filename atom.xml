<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>benwang&#39;s blog</title>
  
  <subtitle>身体还在沉睡，而灵魂已经苏醒</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://liubenwang.github.io/"/>
  <updated>2018-04-19T10:37:07.642Z</updated>
  <id>https://liubenwang.github.io/</id>
  
  <author>
    <name>benwang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>自动引用计数</title>
    <link href="https://liubenwang.github.io/2018/04/18/15.%E8%87%AA%E5%8A%A8%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0/"/>
    <id>https://liubenwang.github.io/2018/04/18/15.自动引用计数/</id>
    <published>2018-04-18T15:51:21.000Z</published>
    <updated>2018-04-19T10:37:07.642Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自动引用计数"><a href="#自动引用计数" class="headerlink" title="自动引用计数"></a>自动引用计数</h1><p><a href="http://wiki.jikexueyuan.com/project/swift/chapter2/16_Automatic_Reference_Counting.html#strong_reference_cycles_for_closures" target="_blank" rel="noopener">自动引用计数 - The Swift Programming Language 中文版 - 极客学院Wiki:</a></p><blockquote><p>1.0 翻译：<a href="https://github.com/TimothyYe" target="_blank" rel="noopener">TimothyYe</a> 校对：<a href="https://github.com/Hawstein" target="_blank" rel="noopener">Hawstein</a></p><p>2.0 翻译+校对：<a href="https://github.com/Channe" target="_blank" rel="noopener">Channe</a></p><p>2.1 翻译：<a href="https://github.com/Channe" target="_blank" rel="noopener">Channe</a> 校对：<a href="http://codebuild.me/" target="_blank" rel="noopener">shanks</a>，<a href="https://github.com/Realank" target="_blank" rel="noopener">Realank</a> ，2016-01-23</p><p>2.2 翻译+校对：<a href="https://github.com/SketchK" target="_blank" rel="noopener">SketchK</a> 2016-05-14 3.0.1，shanks，2016-11-13</p></blockquote><p>本页包含内容：</p><ul><li><a href="http://wiki.jikexueyuan.com/project/swift/chapter2/16_Automatic_Reference_Counting.html#how_arc_works" target="_blank" rel="noopener">自动引用计数的工作机制</a></li><li><a href="http://wiki.jikexueyuan.com/project/swift/chapter2/16_Automatic_Reference_Counting.html#arc_in_action" target="_blank" rel="noopener">自动引用计数实践</a></li><li><a href="http://wiki.jikexueyuan.com/project/swift/chapter2/16_Automatic_Reference_Counting.html#strong_reference_cycles_between_class_instances" target="_blank" rel="noopener">类实例之间的循环强引用</a></li><li><a href="http://wiki.jikexueyuan.com/project/swift/chapter2/16_Automatic_Reference_Counting.html#resolving_strong_reference_cycles_between_class_instances" target="_blank" rel="noopener">解决实例之间的循环强引用</a></li><li><a href="http://wiki.jikexueyuan.com/project/swift/chapter2/16_Automatic_Reference_Counting.html#strong_reference_cycles_for_closures" target="_blank" rel="noopener">闭包引起的循环强引用</a></li><li><a href="http://wiki.jikexueyuan.com/project/swift/chapter2/16_Automatic_Reference_Counting.html#resolving_strong_reference_cycles_for_closures" target="_blank" rel="noopener">解决闭包引起的循环强引用</a></li></ul><p>Swift 使用<em>自动引用计数（ARC）</em>机制来跟踪和管理你的应用程序的内存。通常情况下，Swift 内存管理机制会一直起作用，你无须自己来考虑内存的管理。ARC 会在类的实例不再被使用时，自动释放其占用的内存。</p><p>然而在少数情况下，为了能帮助你管理内存，ARC 需要更多的，代码之间关系的信息。本章描述了这些情况，并且为你示范怎样才能使 ARC 来管理你的应用程序的所有内存。在 Swift 使用 ARC 与在 Obejctive-C 中使用 ARC 非常类似，具体请参考<a href="https://developer.apple.com/library/content/releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html#//apple_ref/doc/uid/TP40011226" target="_blank" rel="noopener">过渡到 ARC 的发布说明</a></p><blockquote><p>注意 引用计数仅仅应用于类的实例。结构体和枚举类型是值类型，不是引用类型，也不是通过引用的方式存储和传递。</p></blockquote><h2 id="自动引用计数的工作机制"><a href="#自动引用计数的工作机制" class="headerlink" title="自动引用计数的工作机制"></a>自动引用计数的工作机制</h2><p>当你每次创建一个类的新的实例的时候，ARC 会分配一块内存来储存该实例信息。内存中会包含实例的类型信息，以及这个实例所有相关的存储型属性的值。</p><p>此外，当实例不再被使用时，ARC 释放实例所占用的内存，并让释放的内存能挪作他用。这确保了不再被使用的实例，不会一直占用内存空间。</p><p>然而，当 ARC 收回和释放了正在被使用中的实例，该实例的属性和方法将不能再被访问和调用。实际上，如果你试图访问这个实例，你的应用程序很可能会崩溃。</p><p>为了确保使用中的实例不会被销毁，ARC 会跟踪和计算每一个实例正在被多少属性，常量和变量所引用。哪怕实例的引用数为1，ARC都不会销毁这个实例。</p><p>为了使上述成为可能，无论你将实例赋值给属性、常量或变量，它们都会创建此实例的强引用。之所以称之为“强”引用，是因为它会将实例牢牢地保持住，只要强引用还在，实例是不允许被销毁的。</p><h2 id="自动引用计数实践"><a href="#自动引用计数实践" class="headerlink" title="自动引用计数实践"></a>自动引用计数实践</h2><p>下面的例子展示了自动引用计数的工作机制。例子以一个简单的<code>Person</code>类开始，并定义了一个叫<code>name</code>的常量属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line">    let name: String</span><br><span class="line">    init(name: String) &#123;</span><br><span class="line">        self.name = name</span><br><span class="line">        print(&quot;\(name) is being initialized&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    deinit &#123;</span><br><span class="line">        print(&quot;\(name) is being deinitialized&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Person</code>类有一个构造函数，此构造函数为实例的<code>name</code>属性赋值，并打印一条消息以表明初始化过程生效。<code>Person</code>类也拥有一个析构函数，这个析构函数会在实例被销毁时打印一条消息。</p><p>接下来的代码片段定义了三个类型为<code>Person?</code>的变量，用来按照代码片段中的顺序，为新的<code>Person</code>实例建立多个引用。由于这些变量是被定义为可选类型（<code>Person?</code>，而不是<code>Person</code>），它们的值会被自动初始化为<code>nil</code>，目前还不会引用到<code>Person</code>类的实例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var reference1: Person?</span><br><span class="line">var reference2: Person?</span><br><span class="line">var reference3: Person?</span><br></pre></td></tr></table></figure><p>现在你可以创建<code>Person</code>类的新实例，并且将它赋值给三个变量中的一个：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">reference1 = Person(name: &quot;John Appleseed&quot;)</span><br><span class="line">// 打印 &quot;John Appleseed is being initialized&quot;</span><br></pre></td></tr></table></figure><p>应当注意到当你调用<code>Person</code>类的构造函数的时候，<code>&quot;John Appleseed is being initialized&quot;</code>会被打印出来。由此可以确定构造函数被执行。</p><p>由于<code>Person</code>类的新实例被赋值给了<code>reference1</code>变量，所以<code>reference1</code>到<code>Person</code>类的新实例之间建立了一个强引用。正是因为这一个强引用，ARC 会保证<code>Person</code>实例被保持在内存中不被销毁。</p><p>如果你将同一个<code>Person</code>实例也赋值给其他两个变量，该实例又会多出两个强引用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">reference2 = reference1</span><br><span class="line">reference3 = reference1</span><br></pre></td></tr></table></figure><p>现在这一个<code>Person</code>实例已经有三个强引用了。</p><p>如果你通过给其中两个变量赋值<code>nil</code>的方式断开两个强引用（包括最先的那个强引用），只留下一个强引用，<code>Person</code>实例不会被销毁：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">reference1 = nil</span><br><span class="line">reference2 = nil</span><br></pre></td></tr></table></figure><p>在你清楚地表明不再使用这个<code>Person</code>实例时，即第三个也就是最后一个强引用被断开时，ARC 会销毁它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">reference3 = nil</span><br><span class="line">// 打印 &quot;John Appleseed is being deinitialized&quot;</span><br></pre></td></tr></table></figure><h2 id="类实例之间的循环强引用"><a href="#类实例之间的循环强引用" class="headerlink" title="类实例之间的循环强引用"></a>类实例之间的循环强引用</h2><p>在上面的例子中，ARC 会跟踪你所新创建的<code>Person</code>实例的引用数量，并且会在<code>Person</code>实例不再被需要时销毁它。</p><p>然而，我们可能会写出一个类实例的强引用数<em>永远不能</em>变成<code>0</code>的代码。如果两个类实例互相持有对方的强引用，因而每个实例都让对方一直存在，就是这种情况。这就是所谓的<em>循环强引用</em>。</p><p>你可以通过定义类之间的关系为弱引用或无主引用，以替代强引用，从而解决循环强引用的问题。具体的过程在<a href="http://wiki.jikexueyuan.com/project/swift/chapter2/16_Automatic_Reference_Counting.html#resolving_strong_reference_cycles_between_class_instances" target="_blank" rel="noopener">解决类实例之间的循环强引用</a>中有描述。不管怎样，在你学习怎样解决循环强引用之前，很有必要了解一下它是怎样产生的。</p><p>下面展示了一个不经意产生循环强引用的例子。例子定义了两个类：<code>Person</code>和<code>Apartment</code>，用来建模公寓和它其中的居民：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line">    let name: String</span><br><span class="line">    init(name: String) &#123; self.name = name &#125;</span><br><span class="line">    var apartment: Apartment?</span><br><span class="line">    deinit &#123; print(&quot;\(name) is being deinitialized&quot;) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Apartment &#123;</span><br><span class="line">    let unit: String</span><br><span class="line">    init(unit: String) &#123; self.unit = unit &#125;</span><br><span class="line">    var tenant: Person?</span><br><span class="line">    deinit &#123; print(&quot;Apartment \(unit) is being deinitialized&quot;) &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每一个<code>Person</code>实例有一个类型为<code>String</code>，名字为<code>name</code>的属性，并有一个可选的初始化为<code>nil</code>的<code>apartment</code>属性。<code>apartment</code>属性是可选的，因为一个人并不总是拥有公寓。</p><p>类似的，每个<code>Apartment</code>实例有一个叫<code>unit</code>，类型为<code>String</code>的属性，并有一个可选的初始化为<code>nil</code>的<code>tenant</code>属性。<code>tenant</code>属性是可选的，因为一栋公寓并不总是有居民。</p><p>这两个类都定义了析构函数，用以在类实例被析构的时候输出信息。这让你能够知晓<code>Person</code>和<code>Apartment</code>的实例是否像预期的那样被销毁。</p><p>接下来的代码片段定义了两个可选类型的变量<code>john</code>和<code>unit4A</code>，并分别被设定为下面的<code>Apartment</code>和<code>Person</code>的实例。这两个变量都被初始化为<code>nil</code>，这正是可选类型的优点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var john: Person?</span><br><span class="line">var unit4A: Apartment?</span><br></pre></td></tr></table></figure><p>现在你可以创建特定的<code>Person</code>和<code>Apartment</code>实例并将赋值给<code>john</code>和<code>unit4A</code>变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">john = Person(name: &quot;John Appleseed&quot;)</span><br><span class="line">unit4A = Apartment(unit: &quot;4A&quot;)</span><br></pre></td></tr></table></figure><p>在两个实例被创建和赋值后，下图表现了强引用的关系。变量<code>john</code>现在有一个指向<code>Person</code>实例的强引用，而变量<code>unit4A</code>有一个指向<code>Apartment</code>实例的强引用：</p><p><img src="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Art/referenceCycle01_2x.png" alt="img"></p><p>现在你能够将这两个实例关联在一起，这样人就能有公寓住了，而公寓也有了房客。注意感叹号是用来展开和访问可选变量<code>john</code>和<code>unit4A</code>中的实例，这样实例的属性才能被赋值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">john!.apartment = unit4A</span><br><span class="line">unit4A!.tenant = john</span><br></pre></td></tr></table></figure><p>在将两个实例联系在一起之后，强引用的关系如图所示：</p><p><img src="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Art/referenceCycle02_2x.png" alt="img"></p><p>不幸的是，这两个实例关联后会产生一个循环强引用。<code>Person</code>实例现在有了一个指向<code>Apartment</code>实例的强引用，而<code>Apartment</code>实例也有了一个指向<code>Person</code>实例的强引用。因此，当你断开<code>john</code>和<code>unit4A</code>变量所持有的强引用时，引用计数并不会降为<code>0</code>，实例也不会被 ARC 销毁：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">john = nil</span><br><span class="line">unit4A = nil</span><br></pre></td></tr></table></figure><p>注意，当你把这两个变量设为<code>nil</code>时，没有任何一个析构函数被调用。循环强引用会一直阻止<code>Person</code>和<code>Apartment</code>类实例的销毁，这就在你的应用程序中造成了内存泄漏。</p><p>在你将<code>john</code>和<code>unit4A</code>赋值为<code>nil</code>后，强引用关系如下图：</p><p><img src="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Art/referenceCycle03_2x.png" alt="img"></p><p><code>Person</code>和<code>Apartment</code>实例之间的强引用关系保留了下来并且不会被断开。</p><h2 id="解决实例之间的循环强引用"><a href="#解决实例之间的循环强引用" class="headerlink" title="解决实例之间的循环强引用"></a>解决实例之间的循环强引用</h2><p>Swift 提供了两种办法用来解决你在使用类的属性时所遇到的循环强引用问题：弱引用（weak reference）和无主引用（unowned reference）。</p><p>弱引用和无主引用允许循环引用中的一个实例引用而另外一个实例<em>不</em>保持强引用。这样实例能够互相引用而不产生循环强引用。</p><p>当其他的实例有更短的生命周期时，使用弱引用，也就是说，当其他实例析构在先时。在上面公寓的例子中，很显然一个公寓在它的生命周期内会在某个时间段没有它的主人，所以一个弱引用就加在公寓类里面，避免循环引用。相比之下，当其他实例有相同的或者更长生命周期时，请使用无主引用。</p><h3 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h3><p><em>弱引用</em>不会对其引用的实例保持强引用，因而不会阻止 ARC 销毁被引用的实例。这个特性阻止了引用变为循环强引用。声明属性或者变量时，在前面加上<code>weak</code>关键字表明这是一个弱引用。</p><p>因为弱引用不会保持所引用的实例，即使引用存在，实例也有可能被销毁。因此，ARC 会在引用的实例被销毁后自动将其赋值为<code>nil</code>。并且因为弱引用可以允许它们的值在运行时被赋值为<code>nil</code>，所以它们会被定义为可选类型变量，而不是常量。</p><p>你可以像其他可选值一样，检查弱引用的值是否存在，你将永远不会访问已销毁的实例的引用。</p><blockquote><p>注意 当 ARC 设置弱引用为<code>nil</code>时，属性观察不会被触发。</p></blockquote><p>下面的例子跟上面<code>Person</code>和<code>Apartment</code>的例子一致，但是有一个重要的区别。这一次，<code>Apartment</code>的<code>tenant</code>属性被声明为弱引用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line">    let name: String</span><br><span class="line">    init(name: String) &#123; self.name = name &#125;</span><br><span class="line">    var apartment: Apartment?</span><br><span class="line">    deinit &#123; print(&quot;\(name) is being deinitialized&quot;) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Apartment &#123;</span><br><span class="line">    let unit: String</span><br><span class="line">    init(unit: String) &#123; self.unit = unit &#125;</span><br><span class="line">    weak var tenant: Person?</span><br><span class="line">    deinit &#123; print(&quot;Apartment \(unit) is being deinitialized&quot;) &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后跟之前一样，建立两个变量（<code>john</code>和<code>unit4A</code>）之间的强引用，并关联两个实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var john: Person?</span><br><span class="line">var unit4A: Apartment?</span><br><span class="line"></span><br><span class="line">john = Person(name: &quot;John Appleseed&quot;)</span><br><span class="line">unit4A = Apartment(unit: &quot;4A&quot;)</span><br><span class="line"></span><br><span class="line">john!.apartment = unit4A</span><br><span class="line">unit4A!.tenant = john</span><br></pre></td></tr></table></figure><p>现在，两个关联在一起的实例的引用关系如下图所示：</p><p><img src="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Art/weakReference01_2x.png" alt="img"></p><p><code>Person</code>实例依然保持对<code>Apartment</code>实例的强引用，但是<code>Apartment</code>实例只持有对<code>Person</code>实例的弱引用。这意味着当你断开<code>john</code>变量所保持的强引用时，再也没有指向<code>Person</code>实例的强引用了：</p><p><img src="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Art/weakReference02_2x.png" alt="img"></p><p>由于再也没有指向<code>Person</code>实例的强引用，该实例会被销毁：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">john = nil</span><br><span class="line">// 打印 &quot;John Appleseed is being deinitialized&quot;</span><br></pre></td></tr></table></figure><p>唯一剩下的指向<code>Apartment</code>实例的强引用来自于变量<code>unit4A</code>。如果你断开这个强引用，再也没有指向<code>Apartment</code>实例的强引用了：</p><p><img src="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Art/weakReference03_2x.png" alt="img"></p><p>由于再也没有指向<code>Apartment</code>实例的强引用，该实例也会被销毁：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">unit4A = nil</span><br><span class="line">// 打印 &quot;Apartment 4A is being deinitialized&quot;</span><br></pre></td></tr></table></figure><p>上面的两段代码展示了变量<code>john</code>和<code>unit4A</code>在被赋值为<code>nil</code>后，<code>Person</code>实例和<code>Apartment</code>实例的析构函数都打印出“销毁”的信息。这证明了引用循环被打破了。</p><blockquote><p>注意 在使用垃圾收集的系统里，弱指针有时用来实现简单的缓冲机制，因为没有强引用的对象只会在内存压力触发垃圾收集时才被销毁。但是在 ARC 中，一旦值的最后一个强引用被移除，就会被立即销毁，这导致弱引用并不适合上面的用途。</p></blockquote><h3 id="无主引用"><a href="#无主引用" class="headerlink" title="无主引用"></a>无主引用</h3><p>和弱引用类似，<em>无主引用</em>不会牢牢保持住引用的实例。和弱引用不同的是，无主引用在其他实例有相同或者更长的生命周期时使用。你可以在声明属性或者变量时，在前面加上关键字<code>unowned</code>表示这是一个无主引用。</p><p>无主引用通常都被期望拥有值。不过 ARC 无法在实例被销毁后将无主引用设为<code>nil</code>，因为非可选类型的变量不允许被赋值为<code>nil</code>。</p><blockquote><p>重要 使用无主引用，你<em>必须</em>确保引用始终指向一个未销毁的实例。 如果你试图在实例被销毁后，访问该实例的无主引用，会触发运行时错误。</p></blockquote><p>下面的例子定义了两个类，<code>Customer</code>和<code>CreditCard</code>，模拟了银行客户和客户的信用卡。这两个类中，每一个都将另外一个类的实例作为自身的属性。这种关系可能会造成循环强引用。</p><p><code>Customer</code>和<code>CreditCard</code>之间的关系与前面弱引用例子中<code>Apartment</code>和<code>Person</code>的关系略微不同。在这个数据模型中，一个客户可能有或者没有信用卡，但是一张信用卡总是关联着一个客户。为了表示这种关系，<code>Customer</code>类有一个可选类型的<code>card</code>属性，但是<code>CreditCard</code>类有一个非可选类型的<code>customer</code>属性。</p><p>此外，只能通过将一个<code>number</code>值和<code>customer</code>实例传递给<code>CreditCard</code>构造函数的方式来创建<code>CreditCard</code>实例。这样可以确保当创建<code>CreditCard</code>实例时总是有一个<code>customer</code>实例与之关联。</p><p>由于信用卡总是关联着一个客户，因此将<code>customer</code>属性定义为无主引用，用以避免循环强引用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class Customer &#123;</span><br><span class="line">    let name: String</span><br><span class="line">    var card: CreditCard?</span><br><span class="line">    init(name: String) &#123;</span><br><span class="line">        self.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    deinit &#123; print(&quot;\(name) is being deinitialized&quot;) &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class CreditCard &#123;</span><br><span class="line">    let number: UInt64</span><br><span class="line">    unowned let customer: Customer</span><br><span class="line">    init(number: UInt64, customer: Customer) &#123;</span><br><span class="line">        self.number = number</span><br><span class="line">        self.customer = customer</span><br><span class="line">    &#125;</span><br><span class="line">    deinit &#123; print(&quot;Card #\(number) is being deinitialized&quot;) &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意 <code>CreditCard</code>类的<code>number</code>属性被定义为<code>UInt64</code>类型而不是<code>Int</code>类型，以确保<code>number</code>属性的存储量在 32 位和 64 位系统上都能足够容纳 16 位的卡号。</p></blockquote><p>下面的代码片段定义了一个叫<code>john</code>的可选类型<code>Customer</code>变量，用来保存某个特定客户的引用。由于是可选类型，所以变量被初始化为<code>nil</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var john: Customer?</span><br></pre></td></tr></table></figure><p>现在你可以创建<code>Customer</code>类的实例，用它初始化<code>CreditCard</code>实例，并将新创建的<code>CreditCard</code>实例赋值为客户的<code>card</code>属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">john = Customer(name: &quot;John Appleseed&quot;)</span><br><span class="line">john!.card = CreditCard(number: 1234_5678_9012_3456, customer: john!)</span><br></pre></td></tr></table></figure><p>在你关联两个实例后，它们的引用关系如下图所示：</p><p><img src="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Art/unownedReference01_2x.png" alt="img"></p><p><code>Customer</code>实例持有对<code>CreditCard</code>实例的强引用，而<code>CreditCard</code>实例持有对<code>Customer</code>实例的无主引用。</p><p>由于<code>customer</code>的无主引用，当你断开<code>john</code>变量持有的强引用时，再也没有指向<code>Customer</code>实例的强引用了：</p><p><img src="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Art/unownedReference02_2x.png" alt="img"></p><p>由于再也没有指向<code>Customer</code>实例的强引用，该实例被销毁了。其后，再也没有指向<code>CreditCard</code>实例的强引用，该实例也随之被销毁了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">john = nil</span><br><span class="line">// 打印 &quot;John Appleseed is being deinitialized&quot;</span><br><span class="line">// 打印 &quot;Card #1234567890123456 is being deinitialized&quot;</span><br></pre></td></tr></table></figure><p>最后的代码展示了在<code>john</code>变量被设为<code>nil</code>后<code>Customer</code>实例和<code>CreditCard</code>实例的构造函数都打印出了“销毁”的信息。</p><blockquote><p>注意 上面的例子展示了如何使用安全的无主引用。对于需要禁用运行时的安全检查的情况（例如，出于性能方面的原因），Swift还提供了不安全的无主引用。与所有不安全的操作一样，你需要负责检查代码以确保其安全性。 你可以通过<code>unowned(unsafe)</code>来声明不安全无主引用。如果你试图在实例被销毁后，访问该实例的不安全无主引用，你的程序会尝试访问该实例之前所在的内存地址，这是一个不安全的操作。</p></blockquote><h3 id="无主引用以及隐式解析可选属性"><a href="#无主引用以及隐式解析可选属性" class="headerlink" title="无主引用以及隐式解析可选属性"></a>无主引用以及隐式解析可选属性</h3><p>上面弱引用和无主引用的例子涵盖了两种常用的需要打破循环强引用的场景。</p><p><code>Person</code>和<code>Apartment</code>的例子展示了两个属性的值都允许为<code>nil</code>，并会潜在的产生循环强引用。这种场景最适合用弱引用来解决。</p><p><code>Customer</code>和<code>CreditCard</code>的例子展示了一个属性的值允许为<code>nil</code>，而另一个属性的值不允许为<code>nil</code>，这也可能会产生循环强引用。这种场景最适合通过无主引用来解决。</p><p>然而，存在着第三种场景，在这种场景中，两个属性都必须有值，并且初始化完成后永远不会为<code>nil</code>。在这种场景中，需要一个类使用无主属性，而另外一个类使用隐式解析可选属性。</p><p>这使两个属性在初始化完成后能被直接访问（不需要可选展开），同时避免了循环引用。这一节将为你展示如何建立这种关系。</p><p>下面的例子定义了两个类，<code>Country</code>和<code>City</code>，每个类将另外一个类的实例保存为属性。在这个模型中，每个国家必须有首都，每个城市必须属于一个国家。为了实现这种关系，<code>Country</code>类拥有一个<code>capitalCity</code>属性，而<code>City</code>类有一个<code>country</code>属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Country &#123;</span><br><span class="line">    let name: String</span><br><span class="line">    var capitalCity: City!</span><br><span class="line">    init(name: String, capitalName: String) &#123;</span><br><span class="line">        self.name = name</span><br><span class="line">        self.capitalCity = City(name: capitalName, country: self)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class City &#123;</span><br><span class="line">    let name: String</span><br><span class="line">    unowned let country: Country</span><br><span class="line">    init(name: String, country: Country) &#123;</span><br><span class="line">        self.name = name</span><br><span class="line">        self.country = country</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了建立两个类的依赖关系，<code>City</code>的构造函数接受一个<code>Country</code>实例作为参数，并且将实例保存到<code>country</code>属性。</p><p><code>Country</code>的构造函数调用了<code>City</code>的构造函数。然而，只有<code>Country</code>的实例完全初始化后，<code>Country</code>的构造函数才能把<code>self</code>传给<code>City</code>的构造函数。在<a href="http://wiki.jikexueyuan.com/project/swift/chapter2/14_Initialization.html#two_phase_initialization" target="_blank" rel="noopener">两段式构造过程</a>中有具体描述。</p><p>为了满足这种需求，通过在类型结尾处加上感叹号（<code>City!</code>）的方式，将<code>Country</code>的<code>capitalCity</code>属性声明为隐式解析可选类型的属性。这意味着像其他可选类型一样，<code>capitalCity</code>属性的默认值为<code>nil</code>，但是不需要展开它的值就能访问它。在<a href="http://wiki.jikexueyuan.com/project/swift/chapter2/01_The_Basics.html#implicityly_unwrapped_optionals" target="_blank" rel="noopener">隐式解析可选类型</a>中有描述。</p><p>由于<code>capitalCity</code>默认值为<code>nil</code>，一旦<code>Country</code>的实例在构造函数中给<code>name</code>属性赋值后，整个初始化过程就完成了。这意味着一旦<code>name</code>属性被赋值后，<code>Country</code>的构造函数就能引用并传递隐式的<code>self</code>。<code>Country</code>的构造函数在赋值<code>capitalCity</code>时，就能将<code>self</code>作为参数传递给<code>City</code>的构造函数。</p><p>以上的意义在于你可以通过一条语句同时创建<code>Country</code>和<code>City</code>的实例，而不产生循环强引用，并且<code>capitalCity</code>的属性能被直接访问，而不需要通过感叹号来展开它的可选值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var country = Country(name: &quot;Canada&quot;, capitalName: &quot;Ottawa&quot;)</span><br><span class="line">print(&quot;\(country.name)&apos;s capital city is called \(country.capitalCity.name)&quot;)</span><br><span class="line">// 打印 &quot;Canada&apos;s capital city is called Ottawa&quot;</span><br></pre></td></tr></table></figure><p>在上面的例子中，使用隐式解析可选值意味着满足了类的构造函数的两个构造阶段的要求。<code>capitalCity</code>属性在初始化完成后，能像非可选值一样使用和存取，同时还避免了循环强引用。</p><h2 id="闭包引起的循环强引用"><a href="#闭包引起的循环强引用" class="headerlink" title="闭包引起的循环强引用"></a>闭包引起的循环强引用</h2><p>前面我们看到了循环强引用是在两个类实例属性互相保持对方的强引用时产生的，还知道了如何用弱引用和无主引用来打破这些循环强引用。</p><p>循环强引用还会发生在当你将一个闭包赋值给类实例的某个属性，并且这个闭包体中又使用了这个类实例时。这个闭包体中可能访问了实例的某个属性，例如<code>self.someProperty</code>，或者闭包中调用了实例的某个方法，例如<code>self.someMethod()</code>。这两种情况都导致了闭包“捕获”<code>self</code>，从而产生了循环强引用。</p><p>循环强引用的产生，是因为闭包和类相似，都是引用类型。当你把一个闭包赋值给某个属性时，你是将这个闭包的引用赋值给了属性。实质上，这跟之前的问题是一样的——两个强引用让彼此一直有效。但是，和两个类实例不同，这次一个是类实例，另一个是闭包。</p><p>Swift 提供了一种优雅的方法来解决这个问题，称之为<code>闭包捕获列表</code>（closure capture list）。同样的，在学习如何用闭包捕获列表打破循环强引用之前，先来了解一下这里的循环强引用是如何产生的，这对我们很有帮助。</p><p>下面的例子为你展示了当一个闭包引用了<code>self</code>后是如何产生一个循环强引用的。例子中定义了一个叫<code>HTMLElement</code>的类，用一种简单的模型表示 HTML 文档中的一个单独的元素：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class HTMLElement &#123;</span><br><span class="line"></span><br><span class="line">    let name: String</span><br><span class="line">    let text: String?</span><br><span class="line"></span><br><span class="line">    lazy var asHTML: Void -&gt; String = &#123;</span><br><span class="line">        if let text = self.text &#123;</span><br><span class="line">            return &quot;&lt;\(self.name)&gt;\(text)&lt;/\(self.name)&gt;&quot;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return &quot;&lt;\(self.name) /&gt;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    init(name: String, text: String? = nil) &#123;</span><br><span class="line">        self.name = name</span><br><span class="line">        self.text = text</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    deinit &#123;</span><br><span class="line">        print(&quot;\(name) is being deinitialized&quot;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>HTMLElement</code>类定义了一个<code>name</code>属性来表示这个元素的名称，例如代表头部元素的<code>&quot;h1&quot;</code>，代表段落的<code>&quot;p&quot;</code>，或者代表换行的<code>&quot;br&quot;</code>。<code>HTMLElement</code>还定义了一个可选属性<code>text</code>，用来设置 HTML 元素呈现的文本。</p><p>除了上面的两个属性，<code>HTMLElement</code>还定义了一个<code>lazy</code>属性<code>asHTML</code>。这个属性引用了一个将<code>name</code>和<code>text</code>组合成 HTML 字符串片段的闭包。该属性是<code>Void -&gt; String</code>类型，或者可以理解为“一个没有参数，返回<code>String</code>的函数”。</p><p>默认情况下，闭包赋值给了<code>asHTML</code>属性，这个闭包返回一个代表 HTML 标签的字符串。如果<code>text</code>值存在，该标签就包含可选值<code>text</code>；如果<code>text</code>不存在，该标签就不包含文本。对于段落元素，根据<code>text</code>是<code>&quot;some text&quot;</code>还是<code>nil</code>，闭包会返回<code>&quot;&lt;p&gt;some text&lt;/p&gt;&quot;</code>或者<code>&quot;&lt;p /&gt;&quot;</code>。</p><p>可以像实例方法那样去命名、使用<code>asHTML</code>属性。然而，由于<code>asHTML</code>是闭包而不是实例方法，如果你想改变特定 HTML 元素的处理方式的话，可以用自定义的闭包来取代默认值。</p><p>例如，可以将一个闭包赋值给<code>asHTML</code>属性，这个闭包能在<code>text</code>属性是<code>nil</code>时使用默认文本，这是为了避免返回一个空的 HTML 标签：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let heading = HTMLElement(name: &quot;h1&quot;)</span><br><span class="line">let defaultText = &quot;some default text&quot;</span><br><span class="line">heading.asHTML = &#123;</span><br><span class="line">    return &quot;&lt;\(heading.name)&gt;\(heading.text ?? defaultText)&lt;/\(heading.name)&gt;&quot;</span><br><span class="line">&#125;</span><br><span class="line">print(heading.asHTML())</span><br><span class="line">// 打印 &quot;&lt;h1&gt;some default text&lt;/h1&gt;&quot;</span><br></pre></td></tr></table></figure><blockquote><p>注意 <code>asHTML</code>声明为<code>lazy</code>属性，因为只有当元素确实需要被处理为 HTML 输出的字符串时，才需要使用<code>asHTML</code>。也就是说，在默认的闭包中可以使用<code>self</code>，因为只有当初始化完成以及<code>self</code>确实存在后，才能访问<code>lazy</code>属性。</p></blockquote><p><code>HTMLElement</code>类只提供了一个构造函数，通过<code>name</code>和<code>text</code>（如果有的话）参数来初始化一个新元素。该类也定义了一个析构函数，当<code>HTMLElement</code>实例被销毁时，打印一条消息。</p><p>下面的代码展示了如何用<code>HTMLElement</code>类创建实例并打印消息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var paragraph: HTMLElement? = HTMLElement(name: &quot;p&quot;, text: &quot;hello, world&quot;)</span><br><span class="line">print(paragraph!.asHTML())</span><br><span class="line">// 打印 &quot;&lt;p&gt;hello, world&lt;/p&gt;&quot;</span><br></pre></td></tr></table></figure><blockquote><p>注意 上面的<code>paragraph</code>变量定义为可选类型的<code>HTMLElement</code>，因此我们可以赋值<code>nil</code>给它来演示循环强引用。</p></blockquote><p>不幸的是，上面写的<code>HTMLElement</code>类产生了类实例和作为<code>asHTML</code>默认值的闭包之间的循环强引用。循环强引用如下图所示：</p><p><img src="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Art/closureReferenceCycle01_2x.png" alt="img"></p><p>实例的<code>asHTML</code>属性持有闭包的强引用。但是，闭包在其闭包体内使用了<code>self</code>（引用了<code>self.name</code>和<code>self.text</code>），因此闭包捕获了<code>self</code>，这意味着闭包又反过来持有了<code>HTMLElement</code>实例的强引用。这样两个对象就产生了循环强引用。（更多关于闭包捕获值的信息，请参考<a href="http://wiki.jikexueyuan.com/project/swift/chapter2/07_Closures.html#capturing_values" target="_blank" rel="noopener">值捕获</a>）。</p><blockquote><p>注意 虽然闭包多次使用了<code>self</code>，它只捕获<code>HTMLElement</code>实例的一个强引用。</p></blockquote><p>如果设置<code>paragraph</code>变量为<code>nil</code>，打破它持有的<code>HTMLElement</code>实例的强引用，<code>HTMLElement</code>实例和它的闭包都不会被销毁，也是因为循环强引用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">paragraph = nil</span><br></pre></td></tr></table></figure><p>注意，<code>HTMLElement</code>的析构函数中的消息并没有被打印，证明了<code>HTMLElement</code>实例并没有被销毁。</p><h2 id="解决闭包引起的循环强引用"><a href="#解决闭包引起的循环强引用" class="headerlink" title="解决闭包引起的循环强引用"></a>解决闭包引起的循环强引用</h2><p>在定义闭包时同时定义捕获列表作为闭包的一部分，通过这种方式可以解决闭包和类实例之间的循环强引用。捕获列表定义了闭包体内捕获一个或者多个引用类型的规则。跟解决两个类实例间的循环强引用一样，声明每个捕获的引用为弱引用或无主引用，而不是强引用。应当根据代码关系来决定使用弱引用还是无主引用。</p><blockquote><p>注意 Swift 有如下要求：只要在闭包内使用<code>self</code>的成员，就要用<code>self.someProperty</code>或者<code>self.someMethod()</code>（而不只是<code>someProperty</code>或<code>someMethod()</code>）。这提醒你可能会一不小心就捕获了<code>self</code>。</p></blockquote><h3 id="定义捕获列表"><a href="#定义捕获列表" class="headerlink" title="定义捕获列表"></a>定义捕获列表</h3><p>捕获列表中的每一项都由一对元素组成，一个元素是<code>weak</code>或<code>unowned</code>关键字，另一个元素是类实例的引用（例如<code>self</code>）或初始化过的变量（如<code>delegate = self.delegate!</code>）。这些项在方括号中用逗号分开。</p><p>如果闭包有参数列表和返回类型，把捕获列表放在它们前面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lazy var someClosure: (Int, String) -&gt; String = &#123;</span><br><span class="line">    [unowned self, weak delegate = self.delegate!] (index: Int, stringToProcess: String) -&gt; String in</span><br><span class="line">    // 这里是闭包的函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果闭包没有指明参数列表或者返回类型，即它们会通过上下文推断，那么可以把捕获列表和关键字<code>in</code>放在闭包最开始的地方：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lazy var someClosure: Void -&gt; String = &#123;</span><br><span class="line">    [unowned self, weak delegate = self.delegate!] in</span><br><span class="line">    // 这里是闭包的函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="弱引用和无主引用"><a href="#弱引用和无主引用" class="headerlink" title="弱引用和无主引用"></a>弱引用和无主引用</h3><p>在闭包和捕获的实例总是互相引用并且总是同时销毁时，将闭包内的捕获定义为<code>无主引用</code>。</p><p>相反的，在被捕获的引用可能会变为<code>nil</code>时，将闭包内的捕获定义为<code>弱引用</code>。弱引用总是可选类型，并且当引用的实例被销毁后，弱引用的值会自动置为<code>nil</code>。这使我们可以在闭包体内检查它们是否存在。</p><blockquote><p>注意 如果被捕获的引用绝对不会变为<code>nil</code>，应该用无主引用，而不是弱引用。</p></blockquote><p>前面的<code>HTMLElement</code>例子中，无主引用是正确的解决循环强引用的方法。这样编写<code>HTMLElement</code>类来避免循环强引用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class HTMLElement &#123;</span><br><span class="line"></span><br><span class="line">    let name: String</span><br><span class="line">    let text: String?</span><br><span class="line"></span><br><span class="line">    lazy var asHTML: Void -&gt; String = &#123;</span><br><span class="line">        [unowned self] in</span><br><span class="line">        if let text = self.text &#123;</span><br><span class="line">            return &quot;&lt;\(self.name)&gt;\(text)&lt;/\(self.name)&gt;&quot;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return &quot;&lt;\(self.name) /&gt;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    init(name: String, text: String? = nil) &#123;</span><br><span class="line">        self.name = name</span><br><span class="line">        self.text = text</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    deinit &#123;</span><br><span class="line">        print(&quot;\(name) is being deinitialized&quot;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的<code>HTMLElement</code>实现和之前的实现一致，除了在<code>asHTML</code>闭包中多了一个捕获列表。这里，捕获列表是<code>[unowned self]</code>，表示“将<code>self</code>捕获为无主引用而不是强引用”。</p><p>和之前一样，我们可以创建并打印<code>HTMLElement</code>实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var paragraph: HTMLElement? = HTMLElement(name: &quot;p&quot;, text: &quot;hello, world&quot;)</span><br><span class="line">print(paragraph!.asHTML())</span><br><span class="line">// 打印 &quot;&lt;p&gt;hello, world&lt;/p&gt;&quot;</span><br></pre></td></tr></table></figure><p>使用捕获列表后引用关系如下图所示：</p><p><img src="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Art/closureReferenceCycle02_2x.png" alt="img"></p><p>这一次，闭包以无主引用的形式捕获<code>self</code>，并不会持有<code>HTMLElement</code>实例的强引用。如果将<code>paragraph</code>赋值为<code>nil</code>，<code>HTMLElement</code>实例将会被销毁，并能看到它的析构函数打印出的消息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">paragraph = nil</span><br><span class="line">// 打印 &quot;p is being deinitialized&quot;</span><br></pre></td></tr></table></figure><p>你可以查看<a href="http://wiki.jikexueyuan.com/project/swift/chapter3/04_Expressions.html" target="_blank" rel="noopener">捕获列表</a>章节，获取更多关于捕获列表的信息。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;自动引用计数&quot;&gt;&lt;a href=&quot;#自动引用计数&quot; class=&quot;headerlink&quot; title=&quot;自动引用计数&quot;&gt;&lt;/a&gt;自动引用计数&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://wiki.jikexueyuan.com/project/swift/cha
      
    
    </summary>
    
    
      <category term="Swift" scheme="https://liubenwang.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://liubenwang.github.io/2018/04/18/hello-world/"/>
    <id>https://liubenwang.github.io/2018/04/18/hello-world/</id>
    <published>2018-04-18T09:50:21.000Z</published>
    <updated>2018-04-19T10:40:43.669Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
      <category term="Other" scheme="https://liubenwang.github.io/tags/Other/"/>
    
  </entry>
  
</feed>
