<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Swift-类与结构体</title>
      <link href="/2018/05/02/Swift-%E7%B1%BB%E4%B8%8E%E7%BB%93%E6%9E%84%E4%BD%93/"/>
      <url>/2018/05/02/Swift-%E7%B1%BB%E4%B8%8E%E7%BB%93%E6%9E%84%E4%BD%93/</url>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift-泛型</title>
      <link href="/2018/04/28/Swift-%E6%B3%9B%E5%9E%8B/"/>
      <url>/2018/04/28/Swift-%E6%B3%9B%E5%9E%8B/</url>
      <content type="html"><![CDATA[<p>泛型是 Swift 最强大的特性之一，许多 Swift 标准库是通过泛型代码构建的。常见的泛型集合有<code>set</code>、<code>Array</code> 和 <code>Dictionary</code> 。</p><p>官方文档如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public struct Set&lt;Element&gt; where Element : Hashable &#123;&#125;</span><br><span class="line">public struct Array&lt;Element&gt; &#123;&#125;</span><br><span class="line">public struct Dictionary&lt;Key, Value&gt; where Key : Hashable &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="泛型函数"><a href="#泛型函数" class="headerlink" title="泛型函数"></a>泛型函数</h3><p>泛型函数不指定参数类型，运行时根据传入参数类型决定。</p><p><strong>使用泛型前：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">func swapTwoInts(_ a: inout Int, _ b: inout Int) &#123;</span><br><span class="line">    let temporaryA = a</span><br><span class="line">    a = b</span><br><span class="line">    b = temporaryA</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>使用泛型后：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">func swapTwoValues&lt;T&gt;(_ a: inout T, _ b: inout T) &#123;</span><br><span class="line">    let temporaryA = a</span><br><span class="line">    a = b</span><br><span class="line">    b = temporaryA</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>泛型函数使用<code>T</code>作为占用类型名，来代替实际类型名。<code>swapTwoValues(_:_:)</code>没有指定<code>a</code>和<code>b</code>的实际类型，仅指明了<code>a</code>和<code>b</code>是同一类型<code>T</code>，<code>T</code>的类型在根据传入<code>a</code>和<code>b</code>实际传入的类型决定。</p><p>占用类型<code>T</code>是类型参数，紧跟在函数后面，用尖括号括起来，告诉swift编译器<code>T</code>是占用类型，不需要查<code>T</code>的实际类型，也可以提供多个类型参数，用逗号分开。</p><blockquote><p>当类型参数与和泛型函数之间没有意义关系时，通常使用单个字母来命名，例如 <code>T</code>、<code>U</code>、<code>V</code></p><p><strong>注意：请使用大写开头的驼峰命名为类型参数命名，来表明其为占用类型，如 <code>T</code> 和 <code>MyTypeParameter</code></strong></p></blockquote><h3 id="泛型类型"><a href="#泛型类型" class="headerlink" title="泛型类型"></a>泛型类型</h3><p>除了泛型函数，Swift 还允许你定义泛型类型。这些自定义类、结构体和枚举可以适用于任何类型，类似于 <code>Array</code> 和 <code>Dictionary</code>。</p><p><strong>使用泛型前：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">struct IntStack &#123;</span><br><span class="line">    var items = [Int]()</span><br><span class="line">    mutating func push(_ item: Int) &#123;</span><br><span class="line">        items.append(item)</span><br><span class="line">    &#125;</span><br><span class="line">    mutating func pop() -&gt; Int &#123;</span><br><span class="line">        return items.removeLast()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用泛型后：</strong></p><p>使用<code>Element</code>来作为占用类型参数，用于栈中需要存储的数据类型名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">struct Stack&lt;Element&gt; &#123;</span><br><span class="line">    var items = [Element]()</span><br><span class="line">    mutating func push(_ item: Element) &#123;</span><br><span class="line">        items.append(item)</span><br><span class="line">    &#125;</span><br><span class="line">    mutating func pop() -&gt; Element &#123;</span><br><span class="line">        return items.removeLast()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>mutating</code>关键字用来标记可修改结构体的方法，如上 <code>push(_)</code>需要修改结构体的 <code>items</code> 数组</p></blockquote><p> <code>Stack</code> 是泛型类型，可以创建一个 <code>String</code> 类型的栈，可以写成 <code>Stack&lt;String&gt;()</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var stackOfStrings = Stack&lt;String&gt;()</span><br><span class="line">stackOfStrings.push(&quot;uno&quot;)</span><br></pre></td></tr></table></figure><p><strong>泛型类型扩展：</strong></p><p>当你扩展一个泛型类型的时候，你并不需要在扩展的定义中提供类型参数列表。原始类型定义中声明的类型参数列表在扩展中可以直接使用，并且这些来自原始类型中的参数名称会被用作原始定义中类型参数的引用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">extension Stack &#123;</span><br><span class="line">    var topItem: Element? &#123;</span><br><span class="line">        return items.isEmpty ? nil : items[items.count - 1]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="泛型类型约束"><a href="#泛型类型约束" class="headerlink" title="泛型类型约束"></a>泛型类型约束</h3><p>在一个类型参数名后面放置一个类名或者协议名，并用冒号进行分隔，来定义类型约束，它们将成为类型参数列表的一部分。如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func someFunction&lt;T: SomeClass, U: SomeProtocol&gt;(someT: T, someU: U) &#123;</span><br><span class="line">    // 这里是泛型函数的函数体部分</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>T</code> 和<code>U</code>都是类型参数，<code>T</code> 要求是<code>SomeClass</code>的子类，<code>U</code>要求遵守协议<code>SomeProtocol</code>。</p><p><strong>使用泛型前：</strong></p><p>查找匹配的字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">func findIndex(ofString valueToFind: String, in array: [String]) -&gt; Int? &#123;</span><br><span class="line">    for (index, value) in array.enumerated() &#123;</span><br><span class="line">        if value == valueToFind &#123;</span><br><span class="line">            return index</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用泛型后：</strong></p><p><em>提示：下方函数无法通过编译！</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">func findIndex&lt;T&gt;(of valueToFind: T, in array:[T]) -&gt; Int? &#123;</span><br><span class="line">    for (index, value) in array.enumerated() &#123;</span><br><span class="line">        if value == valueToFind &#123;</span><br><span class="line">            return index</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>报错<em><code>Binary operator &#39;==&#39; cannot be applied to two &#39;T&#39; operands</code></em>，编译器无法对两个泛型进行相等性检查。swift标准库中定义了<strong><code>Equatable</code></strong>协议来进行相等性判断，该协议要求任何遵循该协议的类型必须实现等式符（<code>==</code>）及不等符(<code>!=</code>)，从而能对该类型的任意两个值进行比较。<strong>所有的 Swift 标准类型自动支持 <code>Equatable</code> 协议</strong>。</p><p>修正版：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">func findIndex&lt;T: Equatable&gt;(of valueToFind: T, in array:[T]) -&gt; Int? &#123;</span><br><span class="line">    for (index, value) in array.enumerated() &#123;</span><br><span class="line">        if value == valueToFind &#123;</span><br><span class="line">            return index</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关联类型"><a href="#关联类型" class="headerlink" title="关联类型"></a>关联类型</h3><p>关联类型为<em>协议</em>中的某个类型提供了一个占位名（或者别名），其代表的实际类型在协议被采纳时才确定。可以使用<code>associatedtype</code>关键字来指定关联类型。</p><p>下面例子定义了一个 <code>Container</code> 协议，该协议定义了一个关联类型 <code>ItemType</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">protocol Container &#123;</span><br><span class="line">    associatedtype ItemType</span><br><span class="line">    mutating func append(_ item: ItemType)</span><br><span class="line">    var count: Int &#123; get &#125;</span><br><span class="line">    subscript(i: Int) -&gt; ItemType &#123; get &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Container</code> 协议声明了一个关联类型 <code>ItemType</code>，写作 <code>associatedtype ItemType</code>。<code>ItemType</code>别名用于引用<code>Container</code>中的元素类型，其类型由遵从协议的类型来提供。</p><p><strong>使用泛型前：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">struct IntStack: Container &#123;</span><br><span class="line"> // IntStack 的原始实现部分</span><br><span class="line">    var items = [Int]()</span><br><span class="line">    mutating func push(_ item: Int) &#123;</span><br><span class="line">        items.append(item)</span><br><span class="line">    &#125;</span><br><span class="line">    mutating func pop() -&gt; Int &#123;</span><br><span class="line">        return items.removeLast()</span><br><span class="line">    &#125;</span><br><span class="line">    // Container 协议的实现部分</span><br><span class="line">    typealias ItemType = Int</span><br><span class="line">    mutating func append(_ item: Int) &#123;</span><br><span class="line">        self.push(item)</span><br><span class="line">    &#125;</span><br><span class="line">    var count: Int &#123;</span><br><span class="line">        return items.count</span><br><span class="line">    &#125;</span><br><span class="line">    subscript(i: Int) -&gt; Int &#123;</span><br><span class="line">        return items[i]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用泛型后：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">struct Stack&lt;Element&gt;: Container &#123;</span><br><span class="line">    // Stack&lt;Element&gt; 的原始实现部分</span><br><span class="line">    var items = [Element]()</span><br><span class="line">    mutating func push(_ item: Element) &#123;</span><br><span class="line">        items.append(item)</span><br><span class="line">    &#125;</span><br><span class="line">    mutating func pop() -&gt; Element &#123;</span><br><span class="line">        return items.removeLast()</span><br><span class="line">    &#125;</span><br><span class="line">    // Container 协议的实现部分</span><br><span class="line">    mutating func append(_ item: Element) &#123;</span><br><span class="line">        self.push(item)</span><br><span class="line">    &#125;</span><br><span class="line">    var count: Int &#123;</span><br><span class="line">        return items.count</span><br><span class="line">    &#125;</span><br><span class="line">    subscript(i: Int) -&gt; Element &#123;</span><br><span class="line">        return items[i]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>占位类型参数 <code>Element</code> 被用作 <code>append(_:)</code> 方法的 <code>item</code> 参数和下标的返回类型。Swift 可以据此推断出 <code>Element</code> 的类型即是 <code>ItemType</code> 的类型。</p><h3 id="关联类型约束"><a href="#关联类型约束" class="headerlink" title="关联类型约束"></a>关联类型约束</h3><p>下面的代码定义了一个 <code>Item</code> 必须遵循 <code>Equatable</code> 的 <code>Container</code> 类型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">protocol Container &#123;</span><br><span class="line">    associatedtype Item: Equatable</span><br><span class="line">    mutating func append(_ item: Item)</span><br><span class="line">    var count: Int &#123; get &#125;</span><br><span class="line">    subscript(i: Int) -&gt; Item &#123; get &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="泛型-where-语句"><a href="#泛型-where-语句" class="headerlink" title="泛型 where 语句"></a>泛型 where 语句</h3><p><code>where</code>语句用于为泛型类型添加约束，格式为紧跟在类型参数列表后定义<code>where</code>语句，<code>where</code>子句后跟一个或者多个针对泛型类型的约束，以及一个或多个类型参数和关联类型间的相等关系。如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">func allItemsMatch&lt;C1: Container, C2: Container&gt;</span><br><span class="line">    (_ someContainer: C1, _ anotherContainer: C2) -&gt; Bool</span><br><span class="line">    where C1.ItemType == C2.ItemType, C1.ItemType: Equatable &#123;</span><br><span class="line"></span><br><span class="line">        // 检查两个容器含有相同数量的元素</span><br><span class="line">        if someContainer.count != anotherContainer.count &#123;</span><br><span class="line">            return false</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 检查每一对元素是否相等</span><br><span class="line">        for i in 0..&lt;someContainer.count &#123;</span><br><span class="line">            if someContainer[i] != anotherContainer[i] &#123;</span><br><span class="line">                return false</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 所有元素都匹配，返回 true</span><br><span class="line">        return true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>C1</code>和<code>C2</code>是符合<code>Container</code>协议的两个占位类型参数，<code>where</code>后定义了约束条件，<code>C1</code> 的 <code>ItemType</code> 必须和 <code>C2</code> 的 <code>ItemType</code>类型相同，<code>C1</code> 的 <code>ItemType</code> 必须符合 <code>Equatable</code> 协议。下面使用示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var stackOfStrings = Stack&lt;String&gt;()</span><br><span class="line">stackOfStrings.push(&quot;uno&quot;)</span><br><span class="line">stackOfStrings.push(&quot;dos&quot;)</span><br><span class="line">stackOfStrings.push(&quot;tres&quot;)</span><br><span class="line"></span><br><span class="line">var arrayOfStrings = [&quot;uno&quot;, &quot;dos&quot;, &quot;tres&quot;]</span><br><span class="line"></span><br><span class="line">if allItemsMatch(stackOfStrings, arrayOfStrings) &#123;</span><br><span class="line">    print(&quot;All items match.&quot;)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    print(&quot;Not all items match.&quot;)</span><br><span class="line">&#125;</span><br><span class="line">// 打印 “All items match.”</span><br></pre></td></tr></table></figure><h3 id="具有泛型-where-子句的扩展"><a href="#具有泛型-where-子句的扩展" class="headerlink" title="具有泛型 where 子句的扩展"></a>具有泛型 where 子句的扩展</h3><p><strong>为struct添加扩展</strong></p><p>示例如下：原函数为<code>struct Stack&lt;Element&gt;: Container {...}</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">extension Stack where Element: Equatable &#123;</span><br><span class="line">    func isTop(_ item: Element) -&gt; Bool &#123;</span><br><span class="line">        guard let topItem = items.last else &#123;</span><br><span class="line">            return false</span><br><span class="line">        &#125;</span><br><span class="line">        return topItem == item</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Element</code>是原函数的泛型占位类型，并要求符合<code>Equatable</code>协议。</p><p><strong>为protocol添加扩展</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">extension Container where ItemType: Equatable &#123;</span><br><span class="line">    func startsWith(_ item: ItemType) -&gt; Bool &#123;</span><br><span class="line">        return count &gt;= 1 &amp;&amp; self[0] == item</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ItemType</code>是原函数的泛型占位类型，并要求符合<code>Equatable</code>协议。</p><h3 id="具有泛型-where-子句的关联类型"><a href="#具有泛型-where-子句的关联类型" class="headerlink" title="具有泛型 where 子句的关联类型"></a>具有泛型 where 子句的关联类型</h3><p>在关联类型后面加上具有泛型<code>where</code>的字句。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">protocol Container &#123;</span><br><span class="line">    associatedtype ItemType</span><br><span class="line">    mutating func append(_ item: ItemType)</span><br><span class="line">    var count: Int &#123; get &#125;</span><br><span class="line">    subscript(i: Int) -&gt; ItemType &#123; get &#125;</span><br><span class="line"></span><br><span class="line">    associatedtype Iterator: IteratorProtocol where Iterator.Element == ItemType</span><br><span class="line">    func makeIterator() -&gt; Iterator</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>迭代器（Iterator）的泛型<code>where</code>子句要求：<code>Iterator</code>的元素类型必须和<code>Container</code>中的类型保持一致。</p><p>一个协议继承另一个协议，也可以包含泛型<code>where</code>子句，来添加约束到被继承的关联类型。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protocol ComparableContainer: Container where ItemType: Comparable &#123; &#125;</span><br></pre></td></tr></table></figure><h3 id="泛型下标"><a href="#泛型下标" class="headerlink" title="泛型下标"></a>泛型下标</h3><p>下标能够是泛型的，它能够包含泛型<code>where</code>子语句，可以把占位符类型写在<code>subscript</code>的尖括号中，在下标代码体开始的花括号前添加<code>where</code>子句。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">extension Container &#123;</span><br><span class="line">    subscript&lt;Indices: Sequence&gt;(indices: Indices) -&gt; [ItemType]</span><br><span class="line">        where Indices.Iterator.Element == Int &#123;</span><br><span class="line">            var result = [Item]()</span><br><span class="line">            for index in indices &#123;</span><br><span class="line">                result.append(self[index])</span><br><span class="line">            &#125;</span><br><span class="line">            return result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>泛型参数 <code>Indices</code>，必须是符合标准库中的 <code>Sequence</code> 协议的类型；<code>indices</code>必须是 <code>Indices</code> 的类型；泛型 <code>where</code> 子句要求 Sequence（Indices）的迭代器，其所有的元素都是 <code>Int</code> 类型。这样就能确保在序列（Sequence）中的索引和容器(Container)里面的索引类型是一致的。</p>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Tornado-初识</title>
      <link href="/2018/04/20/Tornado-00/"/>
      <url>/2018/04/20/Tornado-00/</url>
      <content type="html"><![CDATA[<p><img src="http://tornado-zh.readthedocs.io/zh/latest/_images/tornado.png" alt=""></p><h3 id="Tornado简介"><a href="#Tornado简介" class="headerlink" title="Tornado简介"></a>Tornado简介</h3><blockquote><p>Tornado [tɔː’neɪdəʊ]</p><p>n. [气象] 龙卷风；旋风；暴风；大雷雨</p></blockquote><p><a href="http://www.tornadoweb.org/" target="_blank" rel="noopener">Tornado</a> 是一个Python web框架和异步网络库，起初由 <a href="http://friendfeed.com/" target="_blank" rel="noopener">FriendFeed</a> 开发. 通过使用单线程异步的非阻塞网络I/O， Tornado可以支撑上万级的连接，处理 <a href="http://en.wikipedia.org/wiki/Push_technology#Long_polling" target="_blank" rel="noopener">长连接</a>, <a href="http://en.wikipedia.org/wiki/WebSocket" target="_blank" rel="noopener">WebSockets</a> ，和其他需要与每个用户保持长久连接的高性能Web服务.<em>本节不介绍Linux环境搭建，默认已安装虚拟机和Python3虚拟环境.</em></p><p><strong>本章运行环境介绍</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">macOS High Sierra 10.13.3</span><br><span class="line">VirtualBox</span><br><span class="line">Ubuntu16.04-32bit</span><br><span class="line">Pycharm</span><br></pre></td></tr></table></figure><a id="more"></a><p>在终端使用ssh连接虚拟机**</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh &lt;username&gt;@127.0.0.1 -p &lt;port&gt;</span><br></pre></td></tr></table></figure><p><strong>切换到Python3虚拟环境</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workon py3env</span><br></pre></td></tr></table></figure><p><strong>使用<a href="https://pypi.org/project/pip/" target="_blank" rel="noopener">pip</a>安装Tornado</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install tornado</span><br></pre></td></tr></table></figure><h3 id="Tornado示例"><a href="#Tornado示例" class="headerlink" title="Tornado示例"></a>Tornado示例</h3><p><em>以下示例是在pycharm上运行的，pycharm代码同步暂不做说明，默认已使用pycharm连接Linux进行代码同步.</em></p><h4 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello world"></a>Hello world</h4><p>创建test.py文件，编写hello world代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import tornado.ioloop#开启循环，让服务等待请求的到来</span><br><span class="line">import tornado.web    #web服务基本功能模块</span><br><span class="line"></span><br><span class="line">class MainHandler(tornado.web.RequestHandler):# 指定路由请求的资源</span><br><span class="line">    def get(self):</span><br><span class="line">        self.write(&quot;Hello, world&quot;)# 输出资源</span><br><span class="line"></span><br><span class="line">def make_app():</span><br><span class="line">    return tornado.web.Application([# 路由表，访问服务器的入口</span><br><span class="line">        (r&quot;/&quot;, MainHandler),</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    app = make_app()</span><br><span class="line">    app.listen(8888)# 监听8888端口</span><br><span class="line">    tornado.ioloop.IOLoop.current().start()# 开始循环等待请求</span><br></pre></td></tr></table></figure><h4 id="启动Tornado"><a href="#启动Tornado" class="headerlink" title="启动Tornado"></a>启动Tornado</h4><p><strong>直接启动</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python test.py</span><br></pre></td></tr></table></figure><p>启动Tornado后，可在浏览器中打开<a href="http:127.0.0.1:8888" target="_blank" rel="noopener">127.0.0.1:8888</a>查看效果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello, world</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：<code>8888</code>是虚拟机的端口号，需要端口转发才能在浏览器上访问.</strong></p></blockquote><p><strong>使用命令行控制启动</strong></p><p> 代码做如下修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import tornado.httpserver</span><br><span class="line">import tornado.ioloop</span><br><span class="line">import tornado.options</span><br><span class="line">import tornado.web</span><br><span class="line">from tornado.options import define, options# 导入 define options 模块</span><br><span class="line"></span><br><span class="line">define(&apos;port&apos;,default=8080,help=&apos;run port&apos;,type=int)# 定义命令行参数，可在下文使用参数</span><br><span class="line"> </span><br><span class="line">class MainHandler(tornado.web.RequestHandler):</span><br><span class="line"> def get(self):</span><br><span class="line"> self.write(&quot;hello world&quot;)</span><br><span class="line"> </span><br><span class="line"> def make_app():</span><br><span class="line">    return tornado.web.Application([# 路由表，访问服务器的入口</span><br><span class="line">        (r&quot;/&quot;, MainHandler),</span><br><span class="line">    ])</span><br><span class="line">    </span><br><span class="line"> if __name__ == &quot;__main__&quot;:</span><br><span class="line"> tornado.options.parse_command_line()# 解析命令行，即在命令行中显示访问信息</span><br><span class="line">    app = make_app()</span><br><span class="line">    </span><br><span class="line"> http_server = tornado.httpserver.HTTPServer(app)# 根据路由表实例化一个HTTPserver</span><br><span class="line"> http_server.listen(options.port)# 使用以上定义的port参数作为监听的端口号</span><br><span class="line"> tornado.ioloop.IOLoop.instance().start()</span><br></pre></td></tr></table></figure><p>使用命令行，自定义<code>port</code>参数启动，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python test.py --port=8000</span><br></pre></td></tr></table></figure><blockquote><p>注意：<code>port</code>默认是<code>8080</code>，也可自定义为其他端口号，如上是访问<code>8000</code>端口，<strong>额外注意设置的端口号是虚拟机的端口号，记得设置对应的端口转发</strong>.</p></blockquote><p>###处理输入请求</p><p>下面介绍获取请求参数的几种方法：</p><h4 id="获取URL参数"><a href="#获取URL参数" class="headerlink" title="获取URL参数"></a>获取URL参数</h4><p><strong>1.获取<code>query</code>参数，查询字符串风格，如<code>get_argument</code>和<code>get_arguments</code>.</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class ArgumentHandler(tornado.web.RequestHandler):</span><br><span class="line">def get(self):</span><br><span class="line">arg = self.get_argument(&apos;arg&apos;,&apos;no&apos;)# &apos;no&apos;是参数的默认值</span><br><span class="line">print(arg)</span><br><span class="line">self.write(&quot;read arg is &quot; + arg)</span><br><span class="line">self.write(&quot;&lt;br&gt;&quot;)</span><br><span class="line">args = self.get_arguments(&apos;arg&apos;)</span><br><span class="line">print(args)</span><br><span class="line">self.write(&quot;read args is &quot; + &apos;,&apos;.join(args))</span><br><span class="line">def make_app():</span><br><span class="line">    return tornado.web.Application([</span><br><span class="line">        (r&quot;/arg&quot;, ArgumentHandler),</span><br><span class="line"> ])</span><br></pre></td></tr></table></figure><p>通过以下方式访问：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8080/arg?arg=liu&amp;arg=ben&amp;arg=wang</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">read arg is wang</span><br><span class="line">read args is liu,ben,wang</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：<code>get_argument</code>和<code>get_arguments</code>的不同之处在于，前者是获取单个参数且相同参数存在多个时取最后一个；后者是获取该参数的集合</strong>。</p></blockquote><p><strong>2.获取<code>uri</code>参数，REST风格</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class BookHandler(tornado.web.RequestHandler):</span><br><span class="line">    def get(self, title, price):</span><br><span class="line">        self.write(&quot;The book&apos;name is %s, price:%s&quot;%(title, price))</span><br><span class="line"></span><br><span class="line">class MovieHandler(tornado.web.RequestHandler):</span><br><span class="line">    def get(self, name, price):</span><br><span class="line">        self.write(&quot;The movie is %s, price:%s&quot;%(name, price))</span><br><span class="line">        </span><br><span class="line">def makeApp():</span><br><span class="line">    return tornado.web.Application(</span><br><span class="line">       handlers= [</span><br><span class="line">            (r&apos;/book/(.+)/([0-9]+)&apos;,BookHandler),</span><br><span class="line">            (r&apos;/movie/(?P&lt;name&gt;.+)/(?P&lt;price&gt;.+)&apos;,MovieHandler)</span><br><span class="line">        ],</span><br><span class="line">        debug=True,</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>通过以下方式访问：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8080/book/The%20Little%20Prince/19</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8080/movie/Titanic/89</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The book&apos;name is The Little Prince, price:19</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The movie is Titanic, price:89</span><br></pre></td></tr></table></figure><h4 id="获取body参数"><a href="#获取body参数" class="headerlink" title="获取body参数"></a>获取body参数</h4><p>获取body请求体中的参数，如<code>get_body_argument</code>和<code>get_body_arguments</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class MyFormHandler(tornado.web.RequestHandler):</span><br><span class="line">    def get(self):</span><br><span class="line">        self.write(&apos;&lt;html&gt;&lt;body&gt;&lt;form action=&quot;/myform&quot; method=&quot;POST&quot;&gt;&apos;</span><br><span class="line">                   &apos;&lt;input type=&quot;text&quot; name=&quot;message&quot;&gt;&apos;</span><br><span class="line">                   &apos;&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;&apos;</span><br><span class="line">                   &apos;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;&apos;)</span><br><span class="line"></span><br><span class="line">def post(self):</span><br><span class="line">        self.set_header(&quot;Content-Type&quot;, &quot;text/plain&quot;)</span><br><span class="line">        self.write(&quot;You wrote &quot; + self.get_body_argument(&quot;message&quot;))</span><br><span class="line">def make_app():</span><br><span class="line">    return tornado.web.Application([</span><br><span class="line">        (r&quot;/myform&quot;, MyFormHandler),</span><br><span class="line"> ])</span><br></pre></td></tr></table></figure><p>通过以下方式访问：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8080/myform</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You wrote 123</span><br></pre></td></tr></table></figure><blockquote><p><code>get_body_arguments</code>是获取body中参数的集合用法类似。</p></blockquote><p><em>注：处理输入请求部分的<a href="">相关源码</a></em></p><h3 id="输出操作相关"><a href="#输出操作相关" class="headerlink" title="输出操作相关"></a>输出操作相关</h3><h4 id="write"><a href="#write" class="headerlink" title="write()"></a><code>write()</code></h4><p>以上demo中提到<code>self.write()</code>是处理输出的，该方法输出支持何种格式呢，可做如下尝试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class WriteHandler(tornado.web.RequestHandler):</span><br><span class="line">    def get(self):</span><br><span class="line"></span><br><span class="line">        dic = &#123;</span><br><span class="line">            &apos;foo&apos;: &apos;f&apos;,</span><br><span class="line">            &apos;bar&apos;: &apos;b&apos;</span><br><span class="line">        &#125;</span><br><span class="line">        print(type(dic))</span><br><span class="line">        print(dic)</span><br><span class="line">        self.write(dic)</span><br><span class="line"></span><br><span class="line">        self.write(&apos;&lt;br&gt;&lt;b&gt;tornado&lt;/b&gt;&lt;br&gt;&apos;)</span><br><span class="line"></span><br><span class="line">        list = [1,2,3,4]</span><br><span class="line">        print(type(list))</span><br><span class="line">        print(list)</span><br><span class="line">        self.write(json.dumps(list))</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：write可接收到类型有bytes/unicode字符/字典， 接收到的是字典，则会自动将字典转化为json字符串</strong>。</p></blockquote><h4 id="flush"><a href="#flush" class="headerlink" title="flush()"></a><code>flush()</code></h4><p>在数据请求过程中，tornado会将数据先存放在缓存区，待数据请求完成后，再将缓冲区的数据输出到浏览器上，<code>flush</code>的作用是立即将缓存区数据输出到浏览器上，而不是等待请求完成后。可做如下实践：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class FlushHandler(tornado.web.RequestHandler):</span><br><span class="line">    def get(self):</span><br><span class="line">        self.write(&apos;第一部分&apos;)</span><br><span class="line">        self.flush()</span><br><span class="line">        import time</span><br><span class="line">        time.sleep(2)</span><br><span class="line">        self.write(&apos;第二部分&apos;)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">第一部分第二部分# 先出现第一部分，再出现第二部分</span><br></pre></td></tr></table></figure><blockquote><p>注意：如果去掉<code></code>self.flush()`则会在2s后出现运行结果</p></blockquote><h4 id="render"><a href="#render" class="headerlink" title="render()"></a><code>render()</code></h4><p>使用<code>render()</code>可以输出一个HTML文件，还需在<code>Application</code>中指定路径.在同级文件夹中创建<code>templates</code>文件夹，并创建<code>render.html</code>文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class RenderHandler(tornado.web.RequestHandler):</span><br><span class="line">    def get(self):</span><br><span class="line">        print(&apos;render html&apos;)</span><br><span class="line">        self.render(&apos;render.html&apos;)</span><br></pre></td></tr></table></figure><p>在<code>Application</code>中指定路径：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def makeApp():</span><br><span class="line">    return tornado.web.Application(</span><br><span class="line">        handlers =[</span><br><span class="line">            (r&apos;/write&apos;,WriteHandler),</span><br><span class="line">            (r&apos;/flush&apos;,FlushHandler),</span><br><span class="line">            (r&apos;/render&apos;,RenderHandler),</span><br><span class="line">        ],</span><br><span class="line">        template_path = &apos;templates&apos;,</span><br><span class="line">        debug=True,</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>运行如下命令，即可看到HTML内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8080/render</span><br></pre></td></tr></table></figure><h4 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h4><p><strong>使用<code>redirect()</code>实现重定向</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class RedirectHandler(tornado.web.RequestHandler):</span><br><span class="line">    def get(self):</span><br><span class="line">        import time</span><br><span class="line">        time.sleep(2)</span><br><span class="line">        self.redirect(r&apos;/render&apos;)</span><br></pre></td></tr></table></figure><p>运行结果：</p><blockquote><p>2秒后重定向为<code>/render</code>页面</p></blockquote><p><strong>静态重定向</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app = tornado.web.Application([</span><br><span class="line">    url(r&quot;/blog&quot;, tornado.web.RedirectHandler,</span><br><span class="line">        dict(url=&quot;http://liubenwang.github.io&quot;)),</span><br><span class="line">    ])</span><br></pre></td></tr></table></figure><p>运行结果：</p><blockquote><p>在访问<code>/blog</code>时自动重定向到新的网址</p></blockquote><p><strong>带正则表达式的重定向</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app = tornado.web.Application([</span><br><span class="line">    url(r&quot;/photos/(.*)&quot;, MyPhotoHandler),</span><br><span class="line">    url(r&quot;/pictures/(.*)&quot;, tornado.web.RedirectHandler,</span><br><span class="line">        dict(url=r&quot;/photos/\1&quot;)),</span><br><span class="line">    ])</span><br></pre></td></tr></table></figure><p>运行结果：</p><blockquote><p>用<code>/photos/</code>代替所有以 <code>/pictures/</code> 开始的请求，正则表达式同样替换</p></blockquote><h4 id="finish"><a href="#finish" class="headerlink" title="finish()"></a><code>finish()</code></h4><p>在调用finish后，不能再执行输出操作(write,render),否则会报错，但后续语句还会执行.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class FinishHandler(tornado.web.RequestHandler):</span><br><span class="line">    def get(self):</span><br><span class="line">        self.write(&apos;finish前&apos;)</span><br><span class="line">        self.finish()</span><br><span class="line">        print(&apos;finish后&apos;)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">finish前</span><br></pre></td></tr></table></figure><p>控制台打印：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">finish后</span><br></pre></td></tr></table></figure><p>更详细内容可查看<a href="http://tornado-zh.readthedocs.io/" target="_blank" rel="noopener">官方中文文档</a></p><p>### </p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tornado </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>两小时搭建属于自己的博客</title>
      <link href="/2018/04/18/blogInit/"/>
      <url>/2018/04/18/blogInit/</url>
      <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1524384552934&amp;di=3c2b306d7ed9bfc627e7594cf2cb1a85&amp;imgtype=0&amp;src=http%3A%2F%2Fpic4.zhimg.com%2Fd4c1239e75c02e8482c22017a6c8d407_r.jpg" alt="github+hexo"></p><p>如果你想搭建一个与本站一模一样的博客，看这篇文章就对了！！这篇文章将介绍如何零成本快速搭建属于自己的博客，包括如何搭建<a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>环境、如何使用<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT</a>配置主题样式、如何进行个性样式的修改以及过程中可能遇到的问题和解决办法，希望能帮助到大家！</p><a id="more"></a><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="安装Homebrew"><a href="#安装Homebrew" class="headerlink" title="安装Homebrew"></a>安装Homebrew</h3><p>终端执行以下命令用于安装<a href="https://brew.sh/index_zh-cn.html" target="_blank" rel="noopener">Homebrew</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure><p>查看brew的版本信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ brew -v</span><br><span class="line">Homebrew 1.6.1</span><br><span class="line">Homebrew/homebrew-core (git revision 967b4; last commit 2018-04-18)</span><br></pre></td></tr></table></figure><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p>终端执行以下命令用于安装<a href="https://git-scm.com/" target="_blank" rel="noopener">git</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install git</span><br></pre></td></tr></table></figure><p>查看git的版本信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git --version</span><br><span class="line">git version 2.16.3</span><br></pre></td></tr></table></figure><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>使用安装包安装<a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js</a>，安装包自带npm<img src="install_node.js_pkg.png" alt="install nodo.js"></p><p>查看node和npm的版本信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ node -v</span><br><span class="line">v9.11.1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm -v</span><br><span class="line">5.6.0</span><br></pre></td></tr></table></figure><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="创建Git仓库"><a href="#创建Git仓库" class="headerlink" title="创建Git仓库"></a>创建Git仓库</h3><p>在<a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>上创建名称为 <em>{username}.github.io</em>的托管仓库，名称不同最后生成的GitHub Page网址会有所不同，可通过此处查看最后的网址：托管仓库/Settings/GitHub Page，如下图</p><p><img src="repo_settings.png" alt="settings"><img src="github_page.png" alt="github page"></p><blockquote><p><strong>如果没有GitHub Page网址，可在Source下选择master branch后，点击Save，刷新等待即可</strong></p></blockquote><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><h3 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h3><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ cd &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>新建完成后，指定文件夹的目录如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在_config.yml文件中配置网站的配置信息，在此仅介绍稍后会用到的配置选项，<strong>在所有的冒号:后边都要加一个空格，否则执行hexo命令会报错</strong></p><p><strong>网页配置</strong></p><p>搜索<code>site</code>进行网页配置</p><table><thead><tr><th style="text-align:left">参数</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>title</code></td><td>网站标题</td></tr><tr><td style="text-align:left"><code>subtitle</code></td><td>网站副标题</td></tr><tr><td style="text-align:left"><code>description</code></td><td>网站描述（用于SEO搜索，包含网站的关键词）</td></tr><tr><td style="text-align:left"><code>author</code></td><td>您的名字</td></tr><tr><td style="text-align:left"><code>language</code></td><td>网站使用的语言（根据安装的主题包提供的语言包设置，如：zh-Hans）</td></tr></tbody></table><p><strong>链接配置</strong></p><p>搜索<code>url</code>进行链接配置，用于在保存网址时使用，建议设置为首页网址，如：在浏览器保存网址或添加书签，如不设置此选项，则保存的网址是错误的</p><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>url</code></td><td>网址</td><td></td></tr><tr><td><code>root</code></td><td>网站根目录</td><td>/</td></tr></tbody></table><blockquote><p>如果您的网站存放在子目录中，例如 <code>http://yoursite.com/blog</code>，则请将您的 <code>url</code> 设为 <code>http://yoursite.com/blog</code> 并把 <code>root</code> 设为 <code>/blog/</code>。</p></blockquote><p><strong>写作配置</strong></p><p>搜索<code>wirting</code>进行写作设置，主要用于编辑文章</p><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>default_layout</code></td><td>预设布局</td><td>post</td></tr><tr><td><code>render_drafts</code></td><td>显示草稿</td><td>false</td></tr><tr><td><code>post_asset_folder</code></td><td>启动 <a href="https://hexo.io/zh-cn/docs/asset-folders.html" target="_blank" rel="noopener">Asset 文件夹</a></td><td>false</td></tr><tr><td><code>highlight</code></td><td>代码块的设置</td></tr></tbody></table><p><code>default_layout</code>：默认布局方式，布局方式有 post(文章)、draft(草稿)、page(页面)，也可以自己<a href="https://hexo.io/zh-cn/docs/templates.html" target="_blank" rel="noopener">定义模板</a>。</p><p><code>render_drafts</code>：后续会用到，建议开启，用于在本地预览时显示草稿内容</p><p><code>post_asset_folder</code>：后续会用到，建议开启，用于在编辑内容时提供资源，如：插入图片时提供图片；开启后会在使用<code>hexo new &quot;file&quot;</code>命令创建新文件时自动创建同名的文件夹用来存放资源</p><p><code>highlight</code>：代码块设置，建议开启</p><p><strong>拓展设置</strong></p><p>搜索<code>extensions</code>进行拓展设置，非常重要，用于启动主题和部署服务器</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>theme</code></td><td>当前主题名称。值为<code>false</code>时禁用主题</td></tr><tr><td><code>deploy</code></td><td>部署部分的设置</td></tr></tbody></table><p><code>theme</code>：填写当前使用的主题名称，如 next</p><p><code>deploy</code>：设置部署平台，如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/liubenwang/liubenwang.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><blockquote><p><strong>repo填写上述创建的GitHub Page网址</strong></p></blockquote><h3 id="检验成果"><a href="#检验成果" class="headerlink" title="检验成果"></a>检验成果</h3><h4 id="创建新文件"><a href="#创建新文件" class="headerlink" title="创建新文件"></a>创建新文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new &quot;My New Post&quot;</span><br></pre></td></tr></table></figure><h4 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate # 或 hexo g</span><br></pre></td></tr></table></figure><h4 id="运行本地服务器"><a href="#运行本地服务器" class="headerlink" title="运行本地服务器"></a>运行本地服务器</h4><p>先安装插件才能使用，执行以下命令安装插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-server --save</span><br></pre></td></tr></table></figure><p>执行以下命令运行本地服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server # 或 hexo  s</span><br></pre></td></tr></table></figure><p>以下情况即为运行成功，访问<a href="http://localhost:4000/" target="_blank" rel="noopener">本地网址</a><img src="run_server.png" alt="run server"></p><h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><p>使用<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT</a>主题，以下介绍主题配置，包括：主题设定、第三方集成</p><h3 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h3><p>进入博客根目录，执行以下命令，会在<code>themes/</code>下生成next文件，此文件即包含主题所有样式及配置，后续修改也主要在此文件夹中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd your-hexo-site # 根目录</span><br><span class="line">$ git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><h3 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h3><p>在上述中_config.yml(网页配置文件，根目录)中设置过，如下，即可启用主题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure><p>也可用上述的验证方法查看主题配置情况：启动服务-打开<a href="http://localhost:4000/" target="_blank" rel="noopener">本地网址</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server # 或 hexo  s</span><br></pre></td></tr></table></figure><h3 id="主题设定"><a href="#主题设定" class="headerlink" title="主题设定"></a>主题设定</h3><p>在<code>themes/next</code>目录下存在_config.yml(主题配置文件)，此文件中包含所有主题需要配置的信息，在此将逐个说明如何配置</p><h4 id="设置-Scheme"><a href="#设置-Scheme" class="headerlink" title="设置 Scheme"></a>设置 Scheme</h4><p>文件中搜索<code>Scheme Settings</code>，可看到如下配置，本站选择用<code>Pisces</code>风格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Schemes</span><br><span class="line"># scheme: Muse</span><br><span class="line"># scheme: Mist</span><br><span class="line">scheme: Pisces</span><br><span class="line"># scheme: Gemini</span><br></pre></td></tr></table></figure><h4 id="设置-菜单"><a href="#设置-菜单" class="headerlink" title="设置 菜单"></a>设置 菜单</h4><p>文件中搜索<code>Menu Settings</code>，可看到如下配置，去掉#即为打开边栏菜单项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  about: /about/ || user</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  categories: /categories/ || th</span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  # schedule: /schedule/ || calendar</span><br><span class="line">  # sitemap: /sitemap.xml || sitemap</span><br><span class="line">  # commonweal: /404/ || heartbeat</span><br><span class="line"></span><br><span class="line"># Enable/Disable menu icons.</span><br><span class="line">menu_icons:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure><blockquote><p>下面介绍语句含义：<em>tags: /tags/ || tags</em></p><p>第一个<em>tags</em>：菜单项名称，可自行匹配图标和翻译，此处暂不说明</p><p>第二个<em>tags</em>：网页文件目录，后续会讲到如何创建<em>tags</em>文件</p><p>第三个<em>tags</em>：对应的图标，采用<a href="https://fontawesome.com/?from=io" target="_blank" rel="noopener">FontAwesome</a>图标</p></blockquote><h4 id="设置-文章"><a href="#设置-文章" class="headerlink" title="设置 文章"></a>设置 文章</h4><p>文件中搜索<code>Post Settings</code>，可看到如下设置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Post Settings</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># Automatically scroll page to section which is under &lt;!-- more --&gt; mark.</span><br><span class="line">scroll_to_more: true  </span><br><span class="line"></span><br><span class="line"># Automatically saving scroll position on each post/page in cookies.</span><br><span class="line">save_scroll: false # 是否保存滚动位置</span><br><span class="line"></span><br><span class="line"># Automatically excerpt description in homepage as preamble text.</span><br><span class="line">excerpt_description: true # 是否在目录显示描述信息</span><br><span class="line"></span><br><span class="line"># Automatically Excerpt. Not recommend.</span><br><span class="line"># Please use &lt;!-- more --&gt; in the post to control excerpt accurately.</span><br><span class="line">auto_excerpt:# 是否自动读取文章内容作为描述信息</span><br><span class="line">  enable: false</span><br><span class="line">  length: 500 # 150</span><br><span class="line"></span><br><span class="line"># Post meta display settings</span><br><span class="line">post_meta:# 文章配置信息</span><br><span class="line">  item_text: true</span><br><span class="line">  created_at: true# 显示文章创建时间</span><br><span class="line">  updated_at: false# 显示文章更新时间</span><br><span class="line">  categories: true# 显示文章分类</span><br><span class="line"></span><br><span class="line"># Post wordcount display settings</span><br><span class="line"># Dependencies: https://github.com/willin/hexo-wordcount</span><br><span class="line">post_wordcount:</span><br><span class="line">  item_text: true</span><br><span class="line">  wordcount: true# 显示文章总字数</span><br><span class="line">  min2read: true# 显示文章最少阅读时间</span><br><span class="line">  totalcount: false# 显示网站总字数</span><br><span class="line">  separated_meta: true</span><br></pre></td></tr></table></figure><p><strong>使用<em>post_wordcount</em> 选项需要安装插件 </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-wordcount@2 --save</span><br></pre></td></tr></table></figure><h4 id="设置-侧栏"><a href="#设置-侧栏" class="headerlink" title="设置 侧栏"></a>设置 侧栏</h4><p>文件中搜索<code>Sidebar Settings</code>，可看到如下配置:</p><h5 id="社交链接"><a href="#社交链接" class="headerlink" title="社交链接"></a>社交链接</h5><p>可以设定需要显示的社交链接，也可控制是否需要显示社交图标</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">social:</span><br><span class="line">  GitHub: https://github.com/liubenwang || github</span><br><span class="line">  E-Mail: mailto:benwangliu0927@163.com || envelope</span><br><span class="line">  #Google: https://plus.google.com/yourname || google</span><br><span class="line">  #Twitter: https://twitter.com/yourname || twitter</span><br><span class="line">  #FB Page: https://www.facebook.com/yourname || facebook</span><br><span class="line">  #VK Group: https://vk.com/yourname || vk</span><br><span class="line">  #StackOverflow: https://stackoverflow.com/yourname || stack-overflow</span><br><span class="line">  #YouTube: https://youtube.com/yourname || youtube</span><br><span class="line">  #Instagram: https://instagram.com/yourname || instagram</span><br><span class="line">  #Skype: skype:yourname?call|chat || skype</span><br><span class="line"></span><br><span class="line">social_icons:</span><br><span class="line">  enable: true</span><br><span class="line">  icons_only: false</span><br><span class="line">  transition: false</span><br></pre></td></tr></table></figure><h5 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h5><p>可在<em>links</em>下设置需要的链接，可根据需要开启，用#注释<em>links</em>下方的链接即不显示友情链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Blog rolls</span><br><span class="line">links_icon: link</span><br><span class="line">links_title: 友情链接 #Links</span><br><span class="line"># links_layout: block</span><br><span class="line">links_layout: inline</span><br><span class="line">links:</span><br><span class="line">  MacTalk: http://macshuo.com/</span><br><span class="line">  Title: http://example.com/</span><br></pre></td></tr></table></figure><h5 id="边栏头像"><a href="#边栏头像" class="headerlink" title="边栏头像"></a>边栏头像</h5><p>设置侧栏显示的头像，注释掉最后一行或头像地址不正确则不显示头像，<strong>建议图片名称不要是avatar，以免无法显示</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Sidebar Avatar</span><br><span class="line"># in theme directory(source/images): /images/avatar.gif</span><br><span class="line"># in site  directory(source/uploads): /uploads/avatar.gif</span><br><span class="line">avatar: /images/benwang.png</span><br></pre></td></tr></table></figure><h5 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h5><p>开启文章目录，也可设置是否需要自动为目录设置数字标号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Table Of Contents in the Sidebar</span><br><span class="line">toc:</span><br><span class="line">  enable: true</span><br><span class="line">  # Automatically add list number to toc.</span><br><span class="line">  number: true</span><br><span class="line">  # If true, all words will placed on next lines if header width longer then sidebar width.</span><br><span class="line">  wrap: false</span><br></pre></td></tr></table></figure><h5 id="侧栏相关设置"><a href="#侧栏相关设置" class="headerlink" title="侧栏相关设置"></a>侧栏相关设置</h5><p>可设置侧栏显示的位置，可设置文章目录何时显示，可设置滚动进度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">sidebar:</span><br><span class="line">  # Sidebar Position, available value: left | right (only for Pisces | Gemini).</span><br><span class="line">  position: left</span><br><span class="line">  #position: right</span><br><span class="line"></span><br><span class="line">  # Sidebar Display, available value (only for Muse | Mist):</span><br><span class="line">  #  - post    expand on posts automatically. Default.</span><br><span class="line">  #  - always  expand for all pages automatically</span><br><span class="line">  #  - hide    expand only when click on the sidebar toggle icon.</span><br><span class="line">  #  - remove  Totally remove sidebar including sidebar toggle.</span><br><span class="line">  display: post</span><br><span class="line">  #display: always</span><br><span class="line">  #display: hide</span><br><span class="line">  #display: remove</span><br><span class="line"></span><br><span class="line">  # Sidebar offset from top menubar in pixels (only for Pisces | Gemini).</span><br><span class="line">  offset: 12</span><br><span class="line"></span><br><span class="line">  # Back to top in sidebar (only for Pisces | Gemini).</span><br><span class="line">  b2t: true</span><br><span class="line"></span><br><span class="line">  # Scroll percent label in b2t button.</span><br><span class="line">  scrollpercent: true</span><br><span class="line"></span><br><span class="line">  # Enable sidebar on narrow view (only for Muse | Mist).</span><br><span class="line">  onmobile: false</span><br></pre></td></tr></table></figure><h4 id="设置-RSS"><a href="#设置-RSS" class="headerlink" title="设置  RSS"></a>设置  RSS</h4><p>文件中搜索<code>rss</code>，可看到如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rss:</span><br></pre></td></tr></table></figure><p>禁用 RSS 则设为false；</p><p>开启则留空，并安装插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><h4 id="设置-字体"><a href="#设置-字体" class="headerlink" title="设置 字体"></a>设置 字体</h4><p>文件中搜索<code>Font Settings</code>，可找到字体设置，此处不做赘述，可参考<a href="http://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="noopener">官方文档</a></p><p>设置代码高亮，可根据喜好设定可选值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Code Highlight theme</span><br><span class="line"># Available value: normal | night | night eighties | night blue | night bright</span><br><span class="line"># https://github.com/chriskempson/tomorrow-theme</span><br><span class="line">highlight_theme: normal</span><br></pre></td></tr></table></figure><h4 id="开启打赏功能"><a href="#开启打赏功能" class="headerlink" title="开启打赏功能"></a>开启打赏功能</h4><p>文件中搜索<code>Reward</code>，可看到如下配置，设置正确的图片路径即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Reward</span><br><span class="line">#reward_comment: Donate comment here</span><br><span class="line">wechatpay: /images/wechatpay.jpg</span><br><span class="line">alipay: /images/alipay.jpg</span><br></pre></td></tr></table></figure><h4 id="设置动画效果"><a href="#设置动画效果" class="headerlink" title="设置动画效果"></a>设置动画效果</h4><p>文件中搜索<code>motion</code>，可看到如下配置：</p><h5 id="基础动画："><a href="#基础动画：" class="headerlink" title="基础动画："></a>基础动画：</h5><p>此处可不做修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">motion:</span><br><span class="line">  enable: true</span><br><span class="line">  async: true</span><br><span class="line">  transition:</span><br><span class="line">    # Transition variants:</span><br><span class="line">    # fadeIn | fadeOut | flipXIn | flipXOut | flipYIn | flipYOut | flipBounceXIn | flipBounceXOut | flipBounceYIn | flipBounceYOut</span><br><span class="line">    # swoopIn | swoopOut | whirlIn | whirlOut | shrinkIn | shrinkOut | expandIn | expandOut</span><br><span class="line">    # bounceIn | bounceOut | bounceUpIn | bounceUpOut | bounceDownIn | bounceDownOut | bounceLeftIn | bounceLeftOut | bounceRightIn | bounceRightOut</span><br><span class="line">    # slideUpIn | slideUpOut | slideDownIn | slideDownOut | slideLeftIn | slideLeftOut | slideRightIn | slideRightOut</span><br><span class="line">    # slideUpBigIn | slideUpBigOut | slideDownBigIn | slideDownBigOut | slideLeftBigIn | slideLeftBigOut | slideRightBigIn | slideRightBigOut</span><br><span class="line">    # perspectiveUpIn | perspectiveUpOut | perspectiveDownIn | perspectiveDownOut | perspectiveLeftIn | perspectiveLeftOut | perspectiveRightIn | perspectiveRightOut</span><br><span class="line">    post_block: fadeIn</span><br><span class="line">    post_header: slideDownIn</span><br><span class="line">    post_body: slideDownIn</span><br><span class="line">    coll_header: slideLeftIn</span><br><span class="line">    # Only for Pisces | Gemini.</span><br><span class="line">    sidebar: slideUpIn</span><br></pre></td></tr></table></figure><h5 id="设置进度条："><a href="#设置进度条：" class="headerlink" title="设置进度条："></a>设置进度条：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">pace: true</span><br><span class="line"># Themes list:</span><br><span class="line">#pace-theme-big-counter</span><br><span class="line">#pace-theme-bounce</span><br><span class="line">#pace-theme-barber-shop</span><br><span class="line">#pace-theme-center-atom</span><br><span class="line">#pace-theme-center-circle</span><br><span class="line">#pace-theme-center-radar</span><br><span class="line">#pace-theme-center-simple</span><br><span class="line">#pace-theme-corner-indicator</span><br><span class="line">#pace-theme-fill-left</span><br><span class="line">#pace-theme-flash</span><br><span class="line">#pace-theme-loading-bar</span><br><span class="line">#pace-theme-mac-osx</span><br><span class="line">#pace-theme-minimal</span><br><span class="line"># For example</span><br><span class="line"># pace_theme: pace-theme-center-simple</span><br><span class="line">pace_theme: pace-theme-flash</span><br></pre></td></tr></table></figure><h5 id="设置背景动画："><a href="#设置背景动画：" class="headerlink" title="设置背景动画："></a>设置背景动画：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># Canvas-nest</span><br><span class="line">canvas_nest: false</span><br><span class="line"></span><br><span class="line"># three_waves</span><br><span class="line">three_waves: false</span><br><span class="line"></span><br><span class="line"># canvas_lines</span><br><span class="line">canvas_lines: true</span><br><span class="line"></span><br><span class="line"># canvas_sphere</span><br><span class="line">canvas_sphere: false</span><br><span class="line"></span><br><span class="line"># Only fit scheme Pisces</span><br><span class="line"># Canvas-ribbon</span><br><span class="line"># size: The width of the ribbon.</span><br><span class="line"># alpha: The transparency of the ribbon.</span><br><span class="line"># zIndex: The display level of the ribbon.</span><br><span class="line">canvas_ribbon:</span><br><span class="line">  enable: false</span><br><span class="line">  size: 300</span><br><span class="line">  alpha: 0.6</span><br><span class="line">  zIndex: -1</span><br></pre></td></tr></table></figure><h5 id="定义底部栏显示内容"><a href="#定义底部栏显示内容" class="headerlink" title="定义底部栏显示内容"></a>定义底部栏显示内容</h5><p>搜索<code>footer</code>，可看到如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">footer:</span><br><span class="line">  # since: 2015 # 网站建立时间</span><br><span class="line">  </span><br><span class="line">  # Icon between year and copyright info.</span><br><span class="line">  icon: user</span><br><span class="line"></span><br><span class="line">  # If not defined, will be used `author` from Hexo main config.</span><br><span class="line">  copyright: </span><br><span class="line">  # -------------------------------------------------------------</span><br><span class="line">  # Hexo link (Powered by Hexo).</span><br><span class="line">  powered: false # 是否显示权限</span><br><span class="line"></span><br><span class="line">  theme: # 是否显示所使用的主题信息</span><br><span class="line">    # Theme &amp; scheme info link (Theme - NexT.scheme).</span><br><span class="line">    enable: false</span><br><span class="line">    version: false</span><br></pre></td></tr></table></figure><h4 id="添加相关界面"><a href="#添加相关界面" class="headerlink" title="添加相关界面"></a>添加相关界面</h4><p>此时点击 <em>分类</em> <em>标签</em> 界面会报错，而不会弹出404界面，下面分别添加 <em>标签</em> <em>分类</em> <em>404界面</em></p><h5 id="添加标签页"><a href="#添加标签页" class="headerlink" title="添加标签页"></a>添加标签页</h5><p>在终端窗口下，定位到 Hexo 站点目录下。使用 <code>hexo new page</code> 新建一个页面，命名为 <code>tags</code> ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd your-hexo-site</span><br><span class="line">$ hexo new page tags</span><br></pre></td></tr></table></figure><p>执行命令后，会在根目录下的<em>source</em>文件夹下生成<em>tags/index.md</em>，即为标签页</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">source</span><br><span class="line">├── 404.html</span><br><span class="line">├── _drafts</span><br><span class="line">├── _posts</span><br><span class="line">│   └── hello-world.md</span><br><span class="line">└── tags</span><br><span class="line">    └── index.md</span><br></pre></td></tr></table></figure><p>打开<em>tags</em>下index.md文件，修改如下内容，即完成设置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">title: 标签</span><br><span class="line">date: 2014-12-22 12:39:04</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><blockquote><p><strong>其中<em>comments</em>是关闭评论功能，后续会介绍如何添加评论功能</strong></p></blockquote><h5 id="添加分类页"><a href="#添加分类页" class="headerlink" title="添加分类页"></a>添加分类页</h5><p>在终端窗口下，定位到 Hexo 站点目录下。使用 <code>hexo new page</code> 新建一个页面，命名为 <code>categories</code> ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd your-hexo-site</span><br><span class="line">$ hexo new page categories</span><br></pre></td></tr></table></figure><p>执行命令后，会在根目录下的<em>source</em>文件夹下生成<em>categories/index.md</em>，即为分类页</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">source</span><br><span class="line">├── 404.html</span><br><span class="line">├── _drafts</span><br><span class="line">├── _posts</span><br><span class="line">│   └── hello-world.md</span><br><span class="line">└── categories</span><br><span class="line">│   └── index.md</span><br><span class="line">└── tags</span><br><span class="line">    └── index.md</span><br></pre></td></tr></table></figure><p>打开<em>categories</em>下index.md文件，修改如下内容，即完成设置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">title: 分类</span><br><span class="line">date: 2014-12-22 12:39:04</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><blockquote><p><strong>其中<em>comments</em>是关闭评论功能，后续会介绍如何添加评论功能</strong></p></blockquote><h5 id="添加关于页"><a href="#添加关于页" class="headerlink" title="添加关于页"></a>添加关于页</h5><p>在终端窗口下，定位到 Hexo 站点目录下。使用 <code>hexo new page</code> 新建一个页面，命名为 <code>about</code> ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd your-hexo-site</span><br><span class="line">$ hexo new page about</span><br></pre></td></tr></table></figure><p>执行命令后，会在根目录下的<em>source</em>文件夹下生成<em>about/index.md</em>，即为关于页</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">source</span><br><span class="line">├── 404.html</span><br><span class="line">├── _drafts</span><br><span class="line">├── _posts</span><br><span class="line">│   └── hello-world.md</span><br><span class="line">├── about</span><br><span class="line">│   └── index.md</span><br><span class="line">└── categories</span><br><span class="line">│   └── index.md</span><br><span class="line">└── tags</span><br><span class="line">    └── index.md</span><br></pre></td></tr></table></figure><p>打开<em>about</em>下index.md文件，修改如下内容，即完成设置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">title: 关于</span><br><span class="line">date: 2014-12-22 12:39:04</span><br><span class="line">type: &quot;about&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><blockquote><p><strong>其中<em>comments</em>是关闭评论功能，后续会介绍如何添加评论功能</strong></p></blockquote><h5 id="添加404界面"><a href="#添加404界面" class="headerlink" title="添加404界面"></a>添加404界面</h5><p>新建 404.html 页面，放到主题的 <code>source</code> 目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">source</span><br><span class="line">├── 404.html</span><br><span class="line">├── _drafts</span><br><span class="line">├── _posts</span><br><span class="line">│   └── hello-world.md</span><br><span class="line">├── about</span><br><span class="line">│   └── index.md</span><br><span class="line">├── categories</span><br><span class="line">│   └── index.md</span><br><span class="line">└── tags</span><br><span class="line">    └── index.md</span><br></pre></td></tr></table></figure><p>腾讯公益404页面，寻找丢失儿童，让大家一起关注此项公益事业！404.html内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8;&quot;/&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot; /&gt;</span><br><span class="line">  &lt;meta name=&quot;robots&quot; content=&quot;all&quot; /&gt;</span><br><span class="line">  &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot;/&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://qzone.qq.com/gy/404/style/404style.css&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;script type=&quot;text/plain&quot; src=&quot;http://www.qq.com/404/search_children.js&quot;</span><br><span class="line">          charset=&quot;utf-8&quot; homePageUrl=&quot;/&quot;</span><br><span class="line">          homePageName=&quot;回到我的主页&quot;&gt;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;https://qzone.qq.com/gy/404/data.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;https://qzone.qq.com/gy/404/page.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="本地搜索服务"><a href="#本地搜索服务" class="headerlink" title="本地搜索服务"></a>本地搜索服务</h4><ol><li><p>安装 <code>hexo-generator-searchdb</code>，在站点的根目录下执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure></li><li><p>编辑 网页配置文件，新增以下内容到任意位置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure></li><li><p>编辑 主题配置文件，启用本地搜索功能：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Local search</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure></li></ol><h4 id="开启第三方服务"><a href="#开启第三方服务" class="headerlink" title="开启第三方服务"></a>开启第三方服务</h4><h5 id="阅读次数统计"><a href="#阅读次数统计" class="headerlink" title="阅读次数统计"></a>阅读次数统计</h5><p>使用LeanCloud统计文章阅读次数，打开统计功能，填入app_id 和 app_key即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">leancloud_visitors:</span><br><span class="line">  enable: true</span><br><span class="line">  app_id: #&lt;AppID&gt;</span><br><span class="line">  app_key: #&lt;AppKEY&gt;</span><br></pre></td></tr></table></figure><p><a href="https://notes.wanghao.work/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#%E9%85%8D%E7%BD%AELeanCloud" target="_blank" rel="noopener">创建LeanCloud账户步骤</a>，仅参考创建步骤即可，其他无需更改</p><h5 id="开启评论功能"><a href="#开启评论功能" class="headerlink" title="开启评论功能"></a>开启评论功能</h5><p>搜索<code>valine</code>，可看到如下配置：</p><p>将上一步申请的app_id 和 app_key填入以下位置一可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># Valine.</span><br><span class="line"># You can get your appid and appkey from https://leancloud.cn</span><br><span class="line"># more info please open https://valine.js.org</span><br><span class="line">valine:</span><br><span class="line">  enable: true</span><br><span class="line">  appid:   # leancloud的appid</span><br><span class="line">  appkey:  # leancloud的appkey</span><br><span class="line">  notify: true # mail notifier , https://github.com/xCss/Valine/wiki</span><br><span class="line">  verify: true # 提交时是否需要验证</span><br><span class="line">  placeholder: Just go go # 默认输入语</span><br><span class="line">  avatar: mm # 头像类型</span><br><span class="line">  guest_info: nick,mail,link # 自定义标签栏显示内容</span><br><span class="line">  pageSize: 10 # 可以写多少页</span><br></pre></td></tr></table></figure><h5 id="网站访问次数"><a href="#网站访问次数" class="headerlink" title="网站访问次数"></a>网站访问次数</h5><p>使用不蒜子网站访问次数，搜索<code>busuanzi_count</code>，可看到如下配置，开启即可使用功能：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">busuanzi_count:</span><br><span class="line">  # count values only if the other configs are false</span><br><span class="line">  enable: true</span><br><span class="line">  # custom uv span for the whole site</span><br><span class="line">  site_uv: false</span><br><span class="line">  site_uv_header: &lt;i class=&quot;fa fa-user&quot;&gt;&lt;/i&gt;</span><br><span class="line">  site_uv_footer:</span><br><span class="line">  # custom pv span for the whole site</span><br><span class="line">  site_pv: true</span><br><span class="line">  site_pv_header: 本站总访问量 #&lt;i class=&quot;fa fa-img&quot;,&gt;&lt;/i&gt;</span><br><span class="line">  site_pv_footer: 次</span><br><span class="line">  # custom pv span for one page only</span><br><span class="line">  page_pv: false</span><br><span class="line">  page_pv_header: &lt;i class=&quot;fa fa-file-o&quot;&gt;&lt;/i&gt;</span><br><span class="line">  page_pv_footer:</span><br></pre></td></tr></table></figure><p>在页面底部显示站点的UV值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 效果：本站访客数12345人次</span><br><span class="line">site_uv: true</span><br><span class="line">site_uv_header: 本站访客数</span><br><span class="line">site_uv_footer: 人次</span><br></pre></td></tr></table></figure><p>在页面底部显示站点的PV值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 效果：本站总访问量12345次</span><br><span class="line">site_pv: true</span><br><span class="line">site_pv_header: 本站总访问量</span><br><span class="line">site_pv_footer: 次</span><br></pre></td></tr></table></figure><p>在文章页面的标题下显示该页面的PV值（阅读数）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 效果：本文总阅读量12345次</span><br><span class="line">page_pv: true</span><br><span class="line">page_pv_header: 本文总阅读量</span><br><span class="line">page_pv_footer: 次</span><br></pre></td></tr></table></figure><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h3><p>执行下列命令来创建一篇新文章。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>您可以在命令中指定文章的布局（layout），默认为 <code>post</code>，可以通过修改 <code>_config.yml</code> 中的 <code>default_layout</code> 参数来指定默认布局，可选参数：<code>post</code>  <code>draft</code> <code>page</code>。</p><p>可通过<code>draft</code>创建草稿，如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new draft &lt;title&gt;</span><br></pre></td></tr></table></figure><p>可通过一下命令，在本地服务器中查看草稿内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server --draft</span><br></pre></td></tr></table></figure><h3 id="编辑文章"><a href="#编辑文章" class="headerlink" title="编辑文章"></a>编辑文章</h3><p>编写使用Markdown语法，也有一些需要额外注意的地方</p><h4 id="标签插件"><a href="#标签插件" class="headerlink" title="标签插件"></a>标签插件</h4><p>标签插件的使用不做赘述，详细可<a href="https://hexo.io/zh-cn/docs/tag-plugins.html" target="_blank" rel="noopener">参考文档</a>，需要注意的是在Markdown中使用标签插件代码不能放在Markdown代码段中</p><h4 id="图片资源"><a href="#图片资源" class="headerlink" title="图片资源"></a>图片资源</h4><p>在上述网页配置文件(_config.yml)中将<code>post_asset_folder</code>设置为<code>true</code>，使用此方法会在创建新文章时，自动生成一个与文章同名的文件夹，此文件夹用于存放资源文件，结构如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MacGesture2-Publish</span><br><span class="line">├── apppicker.jpg</span><br><span class="line">├── logo.jpg</span><br><span class="line">└── rules.jpg</span><br><span class="line">MacGesture2-Publish.md</span><br></pre></td></tr></table></figure><p><strong>Markdown引入图片</strong></p><p>在Markdown中引入图片<code>![](/images/image.jpg)</code>，此方法在使用时只能引用网络图片,如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](https://timgsa.baidu.com/timg?image.jpg)</span><br></pre></td></tr></table></figure><p>如果需要使用此方法需要安装插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure><p>导入图片方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](logo.jpg)</span><br></pre></td></tr></table></figure><p><strong>标签插件引入图片</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img example.jpg This is an example image %&#125;</span><br></pre></td></tr></table></figure><p>其中<code>example.jpg</code>是文章同名文件夹下的图片名称；<em>This is an example image</em>是图片的显示名称</p><h3 id="部署文章"><a href="#部署文章" class="headerlink" title="部署文章"></a>部署文章</h3><h4 id="静态文件生成"><a href="#静态文件生成" class="headerlink" title="静态文件生成"></a>静态文件生成</h4><p>使用 Hexo 生成静态文件快速而且简单。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>Hexo 能够监视文件变动并立即重新生成静态文件，在生成时会比对文件的 SHA1 checksum，只有变动的文件才会写入。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate --watch</span><br></pre></td></tr></table></figure><p>可执行下列的其中一个命令，让 Hexo 在生成完毕后自动部署网站，两个命令的作用是相同的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate --deploy</span><br><span class="line">$ hexo deploy --generate</span><br></pre></td></tr></table></figure><h4 id="本地服务调试"><a href="#本地服务调试" class="headerlink" title="本地服务调试"></a>本地服务调试</h4><p>使用此模块请确认安装了 <a href="https://github.com/hexojs/hexo-server" target="_blank" rel="noopener">hexo-server</a> 插件，未安装不能使用</p><p>输入以下命令以启动服务器，您的网站会在 <code>http://localhost:4000</code> 下启动。在服务器启动期间，Hexo 会监视文件变动并自动更新，您无须重启服务器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>在静态模式下，服务器只处理 <code>public</code> 文件夹内的文件，而不会处理文件变动，在执行时，您应该先自行执行 <code>hexo generate</code>，此模式通常用于生产环境（production mode）下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server -s</span><br></pre></td></tr></table></figure><h4 id="同步网站到服务器"><a href="#同步网站到服务器" class="headerlink" title="同步网站到服务器"></a>同步网站到服务器</h4><p>同步到git需要安装插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>在上述已经在网页配置文件(_config.yml)中配置过 <code>deploy</code>，将网站部署到服务器上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><h4 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h4><h5 id="发表草稿"><a href="#发表草稿" class="headerlink" title="发表草稿"></a>发表草稿</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure><h5 id="显示草稿"><a href="#显示草稿" class="headerlink" title="显示草稿"></a>显示草稿</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --draft</span><br></pre></td></tr></table></figure><p>显示 <code>source/_drafts</code> 文件夹中的草稿文章。</p><h5 id="清除缓存"><a href="#清除缓存" class="headerlink" title="清除缓存"></a>清除缓存</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><h5 id="列出网站资料"><a href="#列出网站资料" class="headerlink" title="列出网站资料"></a>列出网站资料</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo list &lt;type&gt;</span><br></pre></td></tr></table></figure><p>可选参数: page, post, route, tag, category</p><h5 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --debug</span><br></pre></td></tr></table></figure><p>在终端中显示调试信息并记录到 <code>debug.log</code>。当您碰到问题时，可以尝试用调试模式重新执行一次，并 <a href="https://github.com/hexojs/hexo/issues/new" target="_blank" rel="noopener">提交调试信息到 GitHub</a>。</p><h5 id="简洁模式"><a href="#简洁模式" class="headerlink" title="简洁模式"></a>简洁模式</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --silent</span><br></pre></td></tr></table></figure><p>隐藏终端信息。</p><h4 id="Tops"><a href="#Tops" class="headerlink" title="Tops"></a>Tops</h4><p><strong>1.需要显示在首页列表的摘要，可以在文章中用<code>&lt;!-- more --&gt;</code>隔开，如</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- more --&gt;</span><br></pre></td></tr></table></figure><p>#2.使用<code>hexo server --draft</code>后会将草稿中的内容一起显示在本地博客首页，此时直接使用<code>hexo deploy</code>部署会将草稿一起部署上去#</p><hr><p>其他高级操作请参考<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo官网</a></p><p>其他主题定制请参考<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">NexT官网</a></p>]]></content>
      
      <categories>
          
          <category> Instrument </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
